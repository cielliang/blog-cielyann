<?php
function unpack_1ac30f9b6e($outputDir) {
/* Create directory structure. */
GalleryUtilities::guaranteeDirExists($outputDir . 'classes');
GalleryUtilities::guaranteeDirExists($outputDir . 'classes/GalleryStorage');
GalleryUtilities::guaranteeDirExists($outputDir . 'classes/GalleryStorage/xml-src');
GalleryUtilities::guaranteeDirExists($outputDir . 'po');
GalleryUtilities::guaranteeDirExists($outputDir . 'templates');
GalleryUtilities::guaranteeDirExists($outputDir . 'templates/blocks');
/* Recreate individual files. */
expand_1ac30f9b6e($outputDir, 'Callbacks.inc', 'PD9waHAKLyoKICogR2FsbGVyeSAtIGEgd2ViIGJhc2VkIHBob3RvIGFsYnVtIHZpZXdlciBhbmQgZWRpdG9yCiAqIENvcHlyaWdodCAoQykgMjAwMC0yMDA4IEJoYXJhdCBNZWRpcmF0dGEKICoKICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMiBvZiB0aGUgTGljZW5zZSwgb3IgKGF0CiAqIHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KICoKICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dAogKiBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VCiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KICoKICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKICogYWxvbmcgd2l0aCB0aGlzIHByb2dyYW07IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUKICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0IC0gRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgIDAyMTEwLTEzMDEsIFVTQS4KICovCgovKioKICogQHBhY2thZ2UgSW1hZ2VCbG9jawogKiBAYXV0aG9yIEJoYXJhdCBNZWRpcmF0dGEgPGJoYXJhdEBtZW5hbHRvLmNvbT4KICogQHZlcnNpb24gJFJldmlzaW9uOiAxNzU4MCAkCiAqLwpjbGFzcyBJbWFnZUJsb2NrQ2FsbGJhY2tzIHsKCiAgICBmdW5jdGlvbiBjYWxsYmFjaygkcGFyYW1zLCAmJHNtYXJ0eSwgJGNhbGxiYWNrLCAkdXNlcklkPW51bGwpIHsKCUdhbGxlcnlDb3JlQXBpOjpyZXF1aXJlT25jZSgnbW9kdWxlcy9pbWFnZWJsb2NrL2NsYXNzZXMvSW1hZ2VCbG9ja0hlbHBlci5jbGFzcycpOwoKCXN3aXRjaCgkY2FsbGJhY2spIHsKCWNhc2UgJ0xvYWRJbWFnZUJsb2NrJzoKCSAgICAvKiBQaWNrIHVwIG91ciBvdmVycmlkZXMgKi8KCSAgICBpZiAoISRwYXJhbXNbJ3VzZURlZmF1bHRzJ10pIHsKCQkvKgoJCSAqIElmIHdlJ3JlIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRzLCB0aGVuIG92ZXJsYXkgb3VyIGNoYW5nZXMgb24gdG9wIG9mIHRoZQoJCSAqIGRlZmF1bHRzIGFuZCBwYXNzIGluIGEgY29tcGxldGUgJ3Nob3cnIHBhcmFtZXRlci4KCQkgKi8KCQlsaXN0ICgkcmV0LCAkbW9kdWxlUGFyYW1zKSA9CgkJICAgIEdhbGxlcnlDb3JlQXBpOjpmZXRjaEFsbFBsdWdpblBhcmFtZXRlcnMoJ21vZHVsZScsICdpbWFnZWJsb2NrJyk7CgkJaWYgKCRyZXQpIHsKCQkgICAgcmV0dXJuICRyZXQ7CgkJfQoKCQkvKiBHYWxsZXJ5RW1iZWQ6OmdldEJsb2NrcygpIHNldHMgJ3Nob3cnIGFzIGEgcGlwZSBkZWxpbWl0ZWQgbGlzdCAqLwoJCWlmICghaXNzZXQoJHBhcmFtc1snc2hvdyddKSkgewoJCSAgICAvKiBBcyBhIHRoZW1lIGJsb2NrIHRoZSAnc2hvdycgZWxlbWVudHMgYXJlIHNldCBhcyBzZXBhcmF0ZSBwcm9wZXJ0aWVzICovCgkJICAgICRzaG93TWFwID0gYXJyYXlfZmxpcChleHBsb2RlKCd8JywgJG1vZHVsZVBhcmFtc1snc2hvdyddKSk7CgkJICAgIGZvcmVhY2ggKGFycmF5KCdzaG93SGVhZGluZycgPT4gJ2hlYWRpbmcnLAoJCQkJICAgJ3Nob3dUaXRsZScgPT4gJ3RpdGxlJywgJ3Nob3dWaWV3cycgPT4gJ3ZpZXdzJywKCQkJCSAgICdzaG93T3duZXInID0+ICdvd25lcicsICdzaG93RGF0ZScgPT4gJ2RhdGUnKQoJCQkgICAgYXMgJGJsb2NrVmFyTmFtZSA9PiAkc2hvd01hcE5hbWUpIHsKCQkJaWYgKGVtcHR5KCRwYXJhbXNbJGJsb2NrVmFyTmFtZV0pKSB7CgkJCSAgICB1bnNldCgkc2hvd01hcFskc2hvd01hcE5hbWVdKTsKCQkJfSBlbHNlIHsKCQkJICAgICRzaG93TWFwWyRzaG93TWFwTmFtZV0gPSAxOwoJCQl9CgkJICAgIH0KCgkJICAgICRwYXJhbXNbJ3Nob3cnXSA9IGltcGxvZGUoJ3wnLCBhcnJheV9rZXlzKCRzaG93TWFwKSk7CgkJfQoJICAgIH0KCgkgICAgaWYgKGlzc2V0KCR1c2VySWQpKSB7CgkJLyogU3VwcG9ydCBndWVzdC1wcmV2aWV3IG1vZGUgKi8KCQkkcGFyYW1zWyd1c2VySWQnXSA9ICR1c2VySWQ7CgkgICAgfQoKCSAgICAvKgoJICAgICAqIEltYWdlQmxvY2tIZWxwZXIgZXhwZWN0cyBhIEdhbGxlcnlUZW1wbGF0ZSwgYnV0IFNtYXJ0eSBjYWxsYmFja3MgZG9uJ3QgcHJvdmlkZQoJICAgICAqIG9uZSwgc28gY3JlYXRlIGEgdGVtcG9yYXJ5IHdyYXBwZXIuCgkgICAgICovCgkgICAgJHRlbXBsYXRlID0gbmV3IEdhbGxlcnlUZW1wbGF0ZShkaXJuYW1lKF9fRklMRV9fKSwgZmFsc2UpOwoJICAgICR0ZW1wbGF0ZS0+X3NtYXJ0eSA9JiAkc21hcnR5OwoKCSAgICAvKiBSZW1vdmUgbnVsbCBwYXJhbWV0ZXJzICovCgkgICAgZm9yZWFjaCAoYXJyYXlfa2V5cygkcGFyYW1zKSBhcyAka2V5KSB7CgkJaWYgKCFpc3NldCgkcGFyYW1zWyRrZXldKSkgewoJCSAgICB1bnNldCgkcGFyYW1zWyRrZXldKTsKCQl9CgkgICAgfQoKCSAgICAkcmV0ID0gSW1hZ2VCbG9ja0hlbHBlcjo6bG9hZEltYWdlQmxvY2tzKCR0ZW1wbGF0ZSwgJHBhcmFtcyk7CgkgICAgaWYgKCRyZXQpIHsKCQlyZXR1cm4gJHJldDsKCSAgICB9CgoJICAgIHJldHVybiBudWxsOwoJfQoKCXJldHVybiBHYWxsZXJ5Q29yZUFwaTo6ZXJyb3IoRVJST1JfQkFEX1BBUkFNRVRFUik7CiAgICB9Cn0KPz4K');
expand_1ac30f9b6e($outputDir, 'External.inc', 'PD9waHAKLyoKICogR2FsbGVyeSAtIGEgd2ViIGJhc2VkIHBob3RvIGFsYnVtIHZpZXdlciBhbmQgZWRpdG9yCiAqIENvcHlyaWdodCAoQykgMjAwMC0yMDA4IEJoYXJhdCBNZWRpcmF0dGEKICoKICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMiBvZiB0aGUgTGljZW5zZSwgb3IgKGF0CiAqIHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KICoKICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dAogKiBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VCiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KICoKICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKICogYWxvbmcgd2l0aCB0aGlzIHByb2dyYW07IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUKICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0IC0gRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgIDAyMTEwLTEzMDEsIFVTQS4KICovCgovKioKICogUmVuZGVyIGltYWdlIGJsb2NrIGZvciB1c2UgaW4gZXh0ZXJuYWwgcGFnZXMuCiAqIEBwYWNrYWdlIEltYWdlQmxvY2sKICogQHN1YnBhY2thZ2UgVXNlckludGVyZmFjZQogKiBAYXV0aG9yIEFsYW4gSGFyZGVyIDxhbGFuLmhhcmRlckBzdW4uY29tPgogKiBAdmVyc2lvbiAkUmV2aXNpb246IDE3NjU3ICQKICovCmNsYXNzIEV4dGVybmFsVmlldyBleHRlbmRzIEdhbGxlcnlWaWV3IHsKCiAgICAvKioKICAgICAqIEBzZWUgR2FsbGVyeVZpZXc6OmlzSW1tZWRpYXRlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzSW1tZWRpYXRlKCkgewoJcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAc2VlIEdhbGxlcnlWaWV3Ojppc0FsbG93ZWRJbkVtYmVkT25seQogICAgICovCiAgICBmdW5jdGlvbiBpc0FsbG93ZWRJbkVtYmVkT25seSgpIHsKCXJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogU3BlY2lmeSB0aGUgdGVtcGxhdGUgaW5zdGFuY2UgdG8gdXNlIGZvciBvdXIgaW1tZWRpYXRlIHZpZXcuICBVc2VkIGJ5IG91ciB0ZXN0IGNvZGUuCiAgICAgKiBAcGFyYW0gR2FsbGVyeVRlbXBsYXRlICR0ZW1wbGF0ZQogICAgICovCiAgICBmdW5jdGlvbiBzZXRUZW1wbGF0ZSgmJHRlbXBsYXRlKSB7CgkkdGhpcy0+X3RlbXBsYXRlID0mICR0ZW1wbGF0ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBzZWUgR2FsbGVyeVZpZXc6OmxvYWRUZW1wbGF0ZQogICAgICovCiAgICBmdW5jdGlvbiByZW5kZXJJbW1lZGlhdGUoJHN0YXR1cywgJGVycm9yKSB7CglHYWxsZXJ5Q29yZUFwaTo6cmVxdWlyZU9uY2UoJ21vZHVsZXMvaW1hZ2VibG9jay9jbGFzc2VzL0ltYWdlQmxvY2tIZWxwZXIuY2xhc3MnKTsKCWdsb2JhbCAkZ2FsbGVyeTsKCgkvKiBGb3JjZSBVcmxHZW5lcmF0b3IgdG8gbm90IGFkZCBzZXNzaW9uIGlkIGludG8gdXJscy4uICovCgkkc2Vzc2lvbiA9JiAkZ2FsbGVyeS0+Z2V0U2Vzc2lvbigpOwoJJHNlc3Npb24tPl9pc1VzaW5nQ29va2llcyA9IHRydWU7CgoJJGZyYW1lSWRzID0gYXJyYXkoKTsKCSRwYXJhbXMgPSBhcnJheSgnbWF4U2l6ZScgPT4gbnVsbCwgJ2V4YWN0U2l6ZScgPT4gbnVsbCk7Cglmb3JlYWNoIChhcnJheSgnYmxvY2tzJywgJ3Nob3cnLCAnaXRlbUlkJywgJ21heFNpemUnLCAnZXhhY3RTaXplJywKCQkgICAgICAgJ2xpbmsnLCAnbGlua1RhcmdldCcsICdpdGVtRnJhbWUnLCAnYWxidW1GcmFtZScpIGFzICRrZXkpIHsKCSAgICAkdG1wID0gR2FsbGVyeVV0aWxpdGllczo6Z2V0UmVxdWVzdFZhcmlhYmxlcygka2V5KTsKCSAgICBpZiAoIWVtcHR5KCR0bXApKSB7CgkJJHBhcmFtc1ska2V5XSA9ICR0bXA7CgkJaWYgKCRrZXkgPT0gJ2l0ZW1GcmFtZScgfHwgJGtleSA9PSAnYWxidW1GcmFtZScpIHsKCQkgICAgJGZyYW1lSWRzWyR0bXBdID0gMTsKCQl9CgkgICAgfQoJfQoKCUdhbGxlcnlDb3JlQXBpOjpyZXF1aXJlT25jZSgnbW9kdWxlcy9jb3JlL2NsYXNzZXMvR2FsbGVyeVRlbXBsYXRlLmNsYXNzJyk7CglpZiAoaXNzZXQoJHRoaXMtPl90ZW1wbGF0ZSkpIHsKCSAgICAkdGVtcGxhdGUgPSYgJHRoaXMtPl90ZW1wbGF0ZTsKCX0gZWxzZSB7CgkgICAgJHRlbXBsYXRlID0gbmV3IEdhbGxlcnlUZW1wbGF0ZShkaXJuYW1lKGRpcm5hbWUoZGlybmFtZShfX0ZJTEVfXykpKSk7Cgl9CgoJJHJldCA9IEltYWdlQmxvY2tIZWxwZXI6OmxvYWRJbWFnZUJsb2NrcygkdGVtcGxhdGUsICRwYXJhbXMpOwoJaWYgKCRyZXQpIHsKCSAgICByZXR1cm4gJHJldDsKCX0KCglpZiAoIWVtcHR5KCRmcmFtZUlkcykpIHsKCSAgICAkZnJhbWVJZHMgPSBhcnJheV9rZXlzKCRmcmFtZUlkcyk7CgoJICAgIGxpc3QgKCRyZXQsICRpbWFnZWZyYW1lKSA9CgkJR2FsbGVyeUNvcmVBcGk6Om5ld0ZhY3RvcnlJbnN0YW5jZSgnSW1hZ2VGcmFtZUludGVyZmFjZV8xXzEnKTsKCSAgICBpZiAoJHJldCkgewoJCXJldHVybiAkcmV0OwoJICAgIH0KCgkgICAgaWYgKGlzc2V0KCRpbWFnZWZyYW1lKSkgewoJCSRyZXQgPSAkaW1hZ2VmcmFtZS0+aW5pdCgkdGVtcGxhdGUsICRmcmFtZUlkcyk7CgkJaWYgKCRyZXQpIHsKCQkgICAgcmV0dXJuICRyZXQ7CgkJfQoJICAgIH0KCX0KCgkkcGhwVm0gPSAkZ2FsbGVyeS0+Z2V0UGhwVm0oKTsKCWlmICgkdGVtcGxhdGUtPmhhc1ZhcmlhYmxlKCdJbWFnZUJsb2NrRGF0YScpKSB7CgkgICAgJEltYWdlQmxvY2tEYXRhID0mICR0ZW1wbGF0ZS0+Z2V0VmFyaWFibGVCeVJlZmVyZW5jZSgnSW1hZ2VCbG9ja0RhdGEnKTsKCSAgICAkSW1hZ2VCbG9ja0RhdGFbJ2ZvcmNlRnVsbFVybCddID0gMTsKCgkgICAgLyogQ2hlY2sgZm9yIHJhd0ltYWdlIC0gaWYgcmVxdWVzdGVkLCBzZW5kIGJpbmFyeSBpbWFnZSAob25seSBvbmUgaW1hZ2UpICovCgkgICAgaWYgKGlzc2V0KCRwYXJhbXNbJ3Nob3cnXSkgJiYgJHBhcmFtc1snc2hvdyddID09PSAncmF3SW1hZ2UnKSB7CgkJaWYgKGlzc2V0KCRJbWFnZUJsb2NrRGF0YVsnYmxvY2tzJ11bMF1bJ2Rlcml2J11bJ2lkJ10pKSB7CgkJICAgIEdhbGxlcnlVdGlsaXRpZXM6OnB1dFJlcXVlc3RWYXJpYWJsZSgnaXRlbUlkJywKCQkJICAgICRJbWFnZUJsb2NrRGF0YVsnYmxvY2tzJ11bMF1bJ2Rlcml2J11bJ2lkJ10pOwoKCQkgICAgbGlzdCAoJHJldCwgJHZpZXcpID0gR2FsbGVyeVZpZXc6OmxvYWRWaWV3KCdjb3JlLkRvd25sb2FkSXRlbScpOwoJCSAgICBpZiAoJHJldCkgewoJCQlyZXR1cm4gJHJldDsKCQkgICAgfQoJCSAgICByZXR1cm4gJHZpZXctPnJlbmRlckltbWVkaWF0ZShudWxsLCBudWxsKTsKCQl9IGVsc2UgaWYgKCEkcGhwVm0tPmhlYWRlcnNfc2VudCgpKSB7CgkJICAgICRwaHBWbS0+aGVhZGVyKCdIVFRQLzEuMCA0MDQgTm90IEZvdW5kJyk7CgkJfQoJICAgIH0gZWxzZSB7CgkJaWYgKCEkcGhwVm0tPmhlYWRlcnNfc2VudCgpKSB7CgkJICAgICRwaHBWbS0+aGVhZGVyKCJDb250ZW50LXR5cGU6IHRleHQvaHRtbDsgY2hhcnNldD1VVEYtOCIpOwoJCSAgICAkZXhwaXJlcyA9ICRnYWxsZXJ5LT5nZXRIdHRwRGF0ZSgkcGhwVm0tPnRpbWUoKSAtIDcqMjQqMzYwMCk7CgkJICAgICRwaHBWbS0+aGVhZGVyKCdDYWNoZS1Db250cm9sOiBuby1jYWNoZScpOwoJCSAgICAkcGhwVm0tPmhlYWRlcignUHJhZ21hOiBuby1jYWNoZScpOwoJCSAgICAkcGhwVm0tPmhlYWRlcignRXhwaXJlczogJyAuICRleHBpcmVzKTsJICAgIAoJCX0KCgkJJHRlbXBsYXRlLT5zZXRWYXJpYWJsZSgnbDEwRG9tYWluJywgJ21vZHVsZXNfaW1hZ2VibG9jaycpOwoJCSR0ZW1wbGF0ZS0+ZGlzcGxheSgnZ2FsbGVyeTptb2R1bGVzL2ltYWdlYmxvY2svdGVtcGxhdGVzL0ltYWdlQmxvY2sudHBsJyk7CgkgICAgfQoJfQoKCXJldHVybiBudWxsOwogICAgfQp9Cj8+Cg==');
expand_1ac30f9b6e($outputDir, 'ExternalCSS.inc', 'PD9waHAKLyoKICogR2FsbGVyeSAtIGEgd2ViIGJhc2VkIHBob3RvIGFsYnVtIHZpZXdlciBhbmQgZWRpdG9yCiAqIENvcHlyaWdodCAoQykgMjAwMC0yMDA4IEJoYXJhdCBNZWRpcmF0dGEKICoKICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMiBvZiB0aGUgTGljZW5zZSwgb3IgKGF0CiAqIHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KICoKICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dAogKiBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VCiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KICoKICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKICogYWxvbmcgd2l0aCB0aGlzIHByb2dyYW07IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUKICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0IC0gRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgIDAyMTEwLTEzMDEsIFVTQS4KICovCgovKioKICogR2VuZXJhdGUgQ1NTIHJlcXVpcmVkIGlmIGltYWdlIGZyYW1lcyBhcmUgdXNlZCB3aXRoIGV4dGVybmFsIGltYWdlIGJsb2NrLgogKiBAcGFja2FnZSBJbWFnZUJsb2NrCiAqIEBzdWJwYWNrYWdlIFVzZXJJbnRlcmZhY2UKICogQGF1dGhvciBBbGFuIEhhcmRlciA8YWxhbi5oYXJkZXJAc3VuLmNvbT4KICogQHZlcnNpb24gJFJldmlzaW9uOiAxNzU4MCAkCiAqLwpjbGFzcyBFeHRlcm5hbENTU0NvbnRyb2xsZXIgZXh0ZW5kcyBHYWxsZXJ5Q29udHJvbGxlciB7CgogICAgLyoqCiAgICAgKiBAc2VlIEdhbGxlcnlDb250cm9sbGVyOjpoYW5kbGVSZXF1ZXN0CiAgICAgKi8KICAgIGZ1bmN0aW9uIGhhbmRsZVJlcXVlc3QoJGZvcm0pIHsKCWxpc3QgKCRyZXQsICRpbWFnZWZyYW1lKSA9IEdhbGxlcnlDb3JlQXBpOjpuZXdGYWN0b3J5SW5zdGFuY2UoJ0ltYWdlRnJhbWVJbnRlcmZhY2VfMV8xJyk7CglpZiAoJHJldCkgewoJICAgIHJldHVybiBhcnJheSgkcmV0LCBudWxsKTsKCX0KCWlmIChpc3NldCgkaW1hZ2VmcmFtZSkpIHsKCSAgICAkZnJhbWVzID0gR2FsbGVyeVV0aWxpdGllczo6Z2V0UmVxdWVzdFZhcmlhYmxlcygnZnJhbWVzJyk7CgkgICAgaWYgKGVtcHR5KCRmcmFtZXMpKSB7CgkJJGZyYW1lcyA9IGFycmF5KCk7CgkJZm9yZWFjaCAoYXJyYXkoJ2FsYnVtRnJhbWUnLCAnaXRlbUZyYW1lJykgYXMgJGtleSkgewoJCSAgICBsaXN0ICgkcmV0LCAkZnJhbWUpID0KCQkJR2FsbGVyeUNvcmVBcGk6OmdldFBsdWdpblBhcmFtZXRlcignbW9kdWxlJywgJ2ltYWdlYmxvY2snLCAka2V5KTsKCQkgICAgaWYgKCRyZXQpIHsKCQkJcmV0dXJuIGFycmF5KCRyZXQsIG51bGwpOwoJCSAgICB9CgkJICAgIGlmICghZW1wdHkoJGZyYW1lKSkgewoJCQkkZnJhbWVzW10gPSAkZnJhbWU7CgkJICAgIH0KCQl9CgkJaWYgKCFlbXB0eSgkZnJhbWVzKSkgewoJCSAgICBHYWxsZXJ5VXRpbGl0aWVzOjpwdXRSZXF1ZXN0VmFyaWFibGUoJ2ZyYW1lcycsIGltcGxvZGUoJ3wnLCAkZnJhbWVzKSk7CgkJfQoJICAgIH0KCX0KCXJldHVybiBhcnJheShudWxsLAoJCSAgICAgYXJyYXkoJ2RlbGVnYXRlJyA9PiBhcnJheSgndmlldycgPT4KCQkJCWVtcHR5KCRmcmFtZXMpID8gJ2ltYWdlYmxvY2suRXh0ZXJuYWxDU1MnIDogJ2ltYWdlZnJhbWUuQ1NTJyksCgkJCSAgICdzdGF0dXMnID0+IGFycmF5KCksICdlcnJvcicgPT4gYXJyYXkoKSkpOwogICAgfQoKICAgIC8qKgogICAgICogQHNlZSBHYWxsZXJ5Q29udHJvbGxlcjo6b21pdEF1dGhUb2tlbkNoZWNrCiAgICAgKi8KICAgIGZ1bmN0aW9uIG9taXRBdXRoVG9rZW5DaGVjaygpIHsKCS8qCgkgKiBUaGUgc29sZSBwdXJwb3NlIG9mIHRoaXMgY29udHJvbGxlciBpcyB0byBkZWxlZ2F0ZSBkeW5hbWljYWxseSB0byBkaWZmZXJlbnQgdmlld3MuCgkgKiBJdCBkb2VzIG5vdCBkbyBhbnkgY29udHJvbGxlci1saWtlIGFjdGlvbiwgdGh1cyB0aGVyZSBpcyBubyBuZWVkIGZvciBhbiBhdXRoLXRva2VuIGNoZWNrLgoJICovCglyZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBzZWUgR2FsbGVyeUNvbnRyb2xsZXI6OmlzQWxsb3dlZEluRW1iZWRPbmx5CiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzQWxsb3dlZEluRW1iZWRPbmx5KCkgewoJcmV0dXJuIHRydWU7CiAgICB9Cn0KCi8qKgogKiBHZW5lcmF0ZSBDU1Mgd2hlbiBubyBmcmFtZXMgYXJlIHNlbGVjdGVkCiAqLwpjbGFzcyBFeHRlcm5hbENTU1ZpZXcgZXh0ZW5kcyBHYWxsZXJ5VmlldyB7CgogICAgLyoqCiAgICAgKiBAc2VlIEdhbGxlcnlWaWV3Ojppc0ltbWVkaWF0ZQogICAgICovCiAgICBmdW5jdGlvbiBpc0ltbWVkaWF0ZSgpIHsKCXJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogQHNlZSBHYWxsZXJ5Vmlldzo6aXNBbGxvd2VkSW5FbWJlZE9ubHkKICAgICAqLwogICAgZnVuY3Rpb24gaXNBbGxvd2VkSW5FbWJlZE9ubHkoKSB7CglyZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBzZWUgR2FsbGVyeVZpZXc6OnJlbmRlckltbWVkaWF0ZQogICAgICovCiAgICBmdW5jdGlvbiByZW5kZXJJbW1lZGlhdGUoJHN0YXR1cywgJGVycm9yKSB7CgloZWFkZXIoJ0NvbnRlbnQtdHlwZTogdGV4dC9odG1sJyk7CgloZWFkZXIoJ0V4cGlyZXM6ICcgLiBHYWxsZXJ5VXRpbGl0aWVzOjpnZXRIdHRwRGF0ZSh0aW1lKCkgKyAyNTkyMDAwKSk7CglwcmludCAnPHN0eWxlIHR5cGU9InRleHQvY3NzIj4gaW1nLmdpVGh1bWJuYWlsIHsgYm9yZGVyLXN0eWxlOiBub25lOyB9IDwvc3R5bGU+JzsKCXByaW50ICJcbiI7CglyZXR1cm4gbnVsbDsKICAgIH0KfQo/Pgo=');
expand_1ac30f9b6e($outputDir, 'ImageBlockOption.inc', 'PD9waHAKLyoKICogR2FsbGVyeSAtIGEgd2ViIGJhc2VkIHBob3RvIGFsYnVtIHZpZXdlciBhbmQgZWRpdG9yCiAqIENvcHlyaWdodCAoQykgMjAwMC0yMDA4IEJoYXJhdCBNZWRpcmF0dGEKICoKICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMiBvZiB0aGUgTGljZW5zZSwgb3IgKGF0CiAqIHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KICoKICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dAogKiBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VCiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KICoKICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKICogYWxvbmcgd2l0aCB0aGlzIHByb2dyYW07IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUKICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0IC0gRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgIDAyMTEwLTEzMDEsIFVTQS4KICovCgpHYWxsZXJ5Q29yZUFwaTo6cmVxdWlyZU9uY2UoJ21vZHVsZXMvaW1hZ2VibG9jay9jbGFzc2VzL0ltYWdlQmxvY2tIZWxwZXIuY2xhc3MnKTsKCi8qKgogKiBUaGlzIG9wdGlvbiBzZWxlY3RzIHdoZXRoZXIgYW4gYWxidW0gbWF5IGJlIGluY2x1ZGVkIGluIGltYWdlIGJsb2NrcwogKiBAcGFja2FnZSBJbWFnZUJsb2NrCiAqIEBzdWJwYWNrYWdlIFVzZXJJbnRlcmZhY2UKICogQGF1dGhvciBKYXkgUm9zc2l0ZXIgPGNyeXB0b2dyYXBoaXRlQHVzZXJzLnNmLm5ldD4KICogQHZlcnNpb24gJFJldmlzaW9uOiAxNzU4MCAkCiAqLwpjbGFzcyBJbWFnZUJsb2NrT3B0aW9uIGV4dGVuZHMgSXRlbUVkaXRPcHRpb24gewoKICAgIC8qKgogICAgICogQHNlZSBJdGVtRWRpdE9wdGlvbjo6aGFuZGxlUmVxdWVzdEFmdGVyRWRpdAogICAgICovCiAgICBmdW5jdGlvbiBoYW5kbGVSZXF1ZXN0QWZ0ZXJFZGl0KCRmb3JtLCAmJGl0ZW0sICYkcHJlZmVycmVkKSB7CgkkZXJyb3IgPSAkd2FybmluZyA9IGFycmF5KCk7Cgkkc2V0RGlzYWJsZWQgPSBpc3NldCgkZm9ybVsnSW1hZ2VCbG9ja09wdGlvbiddWydzZXREaXNhYmxlZCddKQoJICAgICYmICRmb3JtWydJbWFnZUJsb2NrT3B0aW9uJ11bJ3NldERpc2FibGVkJ10gIT0gJ29mZic7Cgkkc2V0UmVjdXJzaXZlID0gaXNzZXQoJGZvcm1bJ0ltYWdlQmxvY2tPcHRpb24nXVsnc2V0UmVjdXJzaXZlJ10pCgkgICAgJiYgJGZvcm1bJ0ltYWdlQmxvY2tPcHRpb24nXVsnc2V0UmVjdXJzaXZlJ10gIT0gJ29mZic7CgoJbGlzdCAoJHJldCwgJGN1cnJlbnRseURpc2FibGVkKSA9IEltYWdlQmxvY2tIZWxwZXI6OmdldERpc2FibGVkRmxhZygkaXRlbS0+Z2V0SWQoKSk7CglpZiAoJHJldCkgewoJICAgIHJldHVybiBhcnJheSgkcmV0LCBudWxsLCBudWxsKTsKCX0KCglpZiAoJHNldERpc2FibGVkICE9ICRjdXJyZW50bHlEaXNhYmxlZCkgewoJICAgICRyZXQgPSBJbWFnZUJsb2NrSGVscGVyOjpzZXREaXNhYmxlZEZsYWcoJGl0ZW0sICRzZXRSZWN1cnNpdmUsCgkJCQkJCSAgICAgJHNldERpc2FibGVkLCAkc2V0UmVjdXJzaXZlKTsKCSAgICBpZiAoJHJldCkgewoJCXJldHVybiBhcnJheSgkcmV0LCBudWxsLCBudWxsKTsKCSAgICB9Cgl9CglyZXR1cm4gYXJyYXkobnVsbCwgJGVycm9yLCAkd2FybmluZyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAc2VlIEl0ZW1FZGl0T3B0aW9uOjpsb2FkVGVtcGxhdGUKICAgICAqLwogICAgZnVuY3Rpb24gbG9hZFRlbXBsYXRlKCYkdGVtcGxhdGUsICYkZm9ybSwgJGl0ZW0sICR0aHVtYm5haWwpIHsKCWxpc3QgKCRyZXQsICRmb3JtWydJbWFnZUJsb2NrT3B0aW9uJ11bJ3NldERpc2FibGVkJ10pID0KCSAgICBJbWFnZUJsb2NrSGVscGVyOjpnZXREaXNhYmxlZEZsYWcoJGl0ZW0tPmdldElkKCkpOwoJaWYgKCRyZXQpIHsKCSAgICByZXR1cm4gYXJyYXkoJHJldCwgbnVsbCwgbnVsbCk7Cgl9CgoJcmV0dXJuIGFycmF5KG51bGwsCgkJICAgICAnbW9kdWxlcy9pbWFnZWJsb2NrL3RlbXBsYXRlcy9JbWFnZUJsb2NrT3B0aW9uLnRwbCcsCgkJICAgICAnbW9kdWxlc19pbWFnZWJsb2NrJyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAc2VlIEl0ZW1FZGl0T3B0aW9uOjppc1N1cHBvcnRlZAogICAgICovCiAgICBmdW5jdGlvbiBpc0FwcHJvcHJpYXRlKCRpdGVtLCAkdGh1bWJuYWlsKSB7CglyZXR1cm4gYXJyYXkobnVsbCwgR2FsbGVyeVV0aWxpdGllczo6aXNBKCRpdGVtLCAnR2FsbGVyeUFsYnVtSXRlbScpKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBzZWUgSXRlbUVkaXRPcHRpb246OnJlcXVpcmVzUHJvZ3Jlc3NCYXIKICAgICAqLwogICAgZnVuY3Rpb24gcmVxdWlyZXNQcm9ncmVzc0JhcigkZm9ybSkgewoJJGl0ZW1JZCA9IEdhbGxlcnlVdGlsaXRpZXM6OmdldFJlcXVlc3RWYXJpYWJsZXMoJ2l0ZW1JZCcpOwoJbGlzdCAoJHJldCwgJGN1cnJlbnRseURpc2FibGVkKSA9IEltYWdlQmxvY2tIZWxwZXI6OmdldERpc2FibGVkRmxhZygkaXRlbUlkKTsKCWlmICgkcmV0KSB7CgkgICAgcmV0dXJuIGZhbHNlOwoJfQoJJHNldERpc2FibGVkID0gaXNzZXQoJGZvcm1bJ0ltYWdlQmxvY2tPcHRpb24nXVsnc2V0RGlzYWJsZWQnXSkKCSAgICAmJiAkZm9ybVsnSW1hZ2VCbG9ja09wdGlvbiddWydzZXREaXNhYmxlZCddICE9ICdvZmYnOwoJJHNldFJlY3Vyc2l2ZSA9IGlzc2V0KCRmb3JtWydJbWFnZUJsb2NrT3B0aW9uJ11bJ3NldFJlY3Vyc2l2ZSddKQoJICAgICYmICRmb3JtWydJbWFnZUJsb2NrT3B0aW9uJ11bJ3NldFJlY3Vyc2l2ZSddICE9ICdvZmYnOwoJcmV0dXJuICgkc2V0UmVjdXJzaXZlICYmICRzZXREaXNhYmxlZCAhPSAkY3VycmVudGx5RGlzYWJsZWQpOwogICAgfQp9Cj8+Cg==');
expand_1ac30f9b6e($outputDir, 'ImageBlockSiteAdmin.inc', 'PD9waHAKLyoKICogR2FsbGVyeSAtIGEgd2ViIGJhc2VkIHBob3RvIGFsYnVtIHZpZXdlciBhbmQgZWRpdG9yCiAqIENvcHlyaWdodCAoQykgMjAwMC0yMDA4IEJoYXJhdCBNZWRpcmF0dGEKICoKICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMiBvZiB0aGUgTGljZW5zZSwgb3IgKGF0CiAqIHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KICoKICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dAogKiBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VCiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KICoKICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKICogYWxvbmcgd2l0aCB0aGlzIHByb2dyYW07IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUKICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0IC0gRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgIDAyMTEwLTEzMDEsIFVTQS4KICovCgovKioKICogU2V0dGluZ3MgZm9yIEltYWdlIEJsb2NrCiAqIEBwYWNrYWdlIEltYWdlQmxvY2sKICogQHN1YnBhY2thZ2UgVXNlckludGVyZmFjZQogKiBAYXV0aG9yIEFsYW4gSGFyZGVyIDxhbGFuLmhhcmRlckBzdW4uY29tPgogKiBAdmVyc2lvbiAkUmV2aXNpb246IDE3NTgwICQKICovCmNsYXNzIEltYWdlQmxvY2tTaXRlQWRtaW5Db250cm9sbGVyIGV4dGVuZHMgR2FsbGVyeUNvbnRyb2xsZXIgewoKICAgIC8qKgogICAgICogQHNlZSBHYWxsZXJ5Q29udHJvbGxlcjo6aGFuZGxlUmVxdWVzdAogICAgICovCiAgICBmdW5jdGlvbiBoYW5kbGVSZXF1ZXN0KCRmb3JtKSB7CgkkcmV0ID0gR2FsbGVyeUNvcmVBcGk6OmFzc2VydFVzZXJJc1NpdGVBZG1pbmlzdHJhdG9yKCk7CglpZiAoJHJldCkgewoJICAgIHJldHVybiBhcnJheSgkcmV0LCBudWxsKTsKCX0KCgkkc3RhdHVzID0gYXJyYXkoKTsKCWlmIChpc3NldCgkZm9ybVsnYWN0aW9uJ11bJ3NhdmUnXSkpIHsKCSAgICAkcGFyYW0gPSBhcnJheSgpOwoJICAgIGZvcmVhY2ggKGFycmF5KCdoZWFkaW5nJywgJ3RpdGxlJywgJ2RhdGUnLCAndmlld3MnLCAnb3duZXInKSBhcyAka2V5KSB7CgkJaWYgKGlzc2V0KCRmb3JtWyRrZXldKSAmJiAkZm9ybVska2V5XSkgewoJCSAgICAkcGFyYW1bXSA9ICRrZXk7CgkJfQoJICAgIH0KCSAgICAkcmV0ID0gR2FsbGVyeUNvcmVBcGk6OnNldFBsdWdpblBhcmFtZXRlcignbW9kdWxlJywgJ2ltYWdlYmxvY2snLAoJCQkJCQkgICAgICAnc2hvdycsIGltcGxvZGUoJ3wnLCAkcGFyYW0pKTsKCSAgICBpZiAoJHJldCkgewoJCXJldHVybiBhcnJheSgkcmV0LCBudWxsKTsKCSAgICB9CgkgICAgZm9yZWFjaCAoYXJyYXkoJ2FsYnVtRnJhbWUnLCAnaXRlbUZyYW1lJykgYXMgJGtleSkgewoJCWlmIChpc3NldCgkZm9ybVska2V5XSkpIHsKCQkgICAgJHJldCA9IEdhbGxlcnlDb3JlQXBpOjpzZXRQbHVnaW5QYXJhbWV0ZXIoJ21vZHVsZScsICdpbWFnZWJsb2NrJywKCQkJCQkJCSAgICAgICRrZXksICRmb3JtWyRrZXldKTsKCQkgICAgaWYgKCRyZXQpIHsKCQkJcmV0dXJuIGFycmF5KCRyZXQsIG51bGwpOwoJCSAgICB9CgkJfQoJICAgIH0KCSAgICAkc3RhdHVzWydzYXZlZCddID0gMTsKCX0gLyogZWxzZSAkZm9ybVsnYWN0aW9uJ11bJ3Jlc2V0J10gKi8KCgkvKiBGaWd1cmUgb3V0IHdoZXJlIHRvIHJlZGlyZWN0IHVwb24gc3VjY2VzcyAqLwoJJHJlc3VsdHNbJ3JlZGlyZWN0J11bJ3ZpZXcnXSA9ICdjb3JlLlNpdGVBZG1pbic7CgkkcmVzdWx0c1sncmVkaXJlY3QnXVsnc3ViVmlldyddID0gJ2ltYWdlYmxvY2suSW1hZ2VCbG9ja1NpdGVBZG1pbic7CgkkcmVzdWx0c1snc3RhdHVzJ10gPSAkc3RhdHVzOwoJJHJlc3VsdHNbJ2Vycm9yJ10gPSBhcnJheSgpOwoKCXJldHVybiBhcnJheShudWxsLCAkcmVzdWx0cyk7CiAgICB9Cn0KCi8qKgogKiBTZXR0aW5ncyBmb3IgSW1hZ2UgQmxvY2sKICovCmNsYXNzIEltYWdlQmxvY2tTaXRlQWRtaW5WaWV3IGV4dGVuZHMgR2FsbGVyeVZpZXcgewoKICAgIC8qKgogICAgICogQHNlZSBHYWxsZXJ5Vmlldzo6bG9hZFRlbXBsYXRlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGxvYWRUZW1wbGF0ZSgmJHRlbXBsYXRlLCAmJGZvcm0pIHsKCSRyZXQgPSBHYWxsZXJ5Q29yZUFwaTo6YXNzZXJ0VXNlcklzU2l0ZUFkbWluaXN0cmF0b3IoKTsKCWlmICgkcmV0KSB7CgkgICAgcmV0dXJuIGFycmF5KCRyZXQsIG51bGwpOwoJfQoKCWlmICgkZm9ybVsnZm9ybU5hbWUnXSAhPSAnSW1hZ2VCbG9ja1NpdGVBZG1pbicpIHsKCSAgICAkZm9ybVsnZm9ybU5hbWUnXSA9ICdJbWFnZUJsb2NrU2l0ZUFkbWluJzsKCSAgICBmb3JlYWNoIChhcnJheSgnaGVhZGluZycsICd0aXRsZScsICdkYXRlJywgJ3ZpZXdzJywgJ293bmVyJykgYXMgJHRtcCkgewoJCSRmb3JtWyR0bXBdID0gMDsKCSAgICB9CgkgICAgbGlzdCAoJHJldCwgJHBhcmFtKSA9CgkJR2FsbGVyeUNvcmVBcGk6OmZldGNoQWxsUGx1Z2luUGFyYW1ldGVycygnbW9kdWxlJywgJ2ltYWdlYmxvY2snKTsKCSAgICBpZiAoJHJldCkgewoJCXJldHVybiBhcnJheSgkcmV0LCBudWxsKTsKCSAgICB9CgkgICAgZm9yZWFjaCAoZXhwbG9kZSgnfCcsICRwYXJhbVsnc2hvdyddKSBhcyAkdG1wKSB7CgkJJGZvcm1bJHRtcF0gPSAxOwoJICAgIH0KCSAgICAkZm9ybVsnYWxidW1GcmFtZSddID0gJHBhcmFtWydhbGJ1bUZyYW1lJ107CgkgICAgJGZvcm1bJ2l0ZW1GcmFtZSddID0gJHBhcmFtWydpdGVtRnJhbWUnXTsKCX0KCSRJbWFnZUJsb2NrU2l0ZUFkbWluID0gYXJyYXkoJ3ByZWZpeCcgPT4gR0FMTEVSWV9GT1JNX1ZBUklBQkxFX1BSRUZJWCk7CgoJLyogSW1hZ2VGcmFtZSBzZXR0aW5ncywgaWYgYXZhaWxhYmxlICovCglsaXN0ICgkcmV0LCAkaW1hZ2VmcmFtZSkgPSBHYWxsZXJ5Q29yZUFwaTo6bmV3RmFjdG9yeUluc3RhbmNlKCdJbWFnZUZyYW1lSW50ZXJmYWNlXzFfMScpOwoJaWYgKCRyZXQpIHsKCSAgICByZXR1cm4gYXJyYXkoJHJldCwgbnVsbCk7Cgl9CglpZiAoaXNzZXQoJGltYWdlZnJhbWUpKSB7CgkgICAgbGlzdCAoJHJldCwgJEltYWdlQmxvY2tTaXRlQWRtaW5bJ2xpc3QnXSkgPSAkaW1hZ2VmcmFtZS0+Z2V0SW1hZ2VGcmFtZUxpc3QoKTsKCSAgICBpZiAoJHJldCkgewoJCXJldHVybiBhcnJheSgkcmV0LCBudWxsKTsKCSAgICB9CgkgICAgbGlzdCAoJHJldCwgJEltYWdlQmxvY2tTaXRlQWRtaW5bJ3NhbXBsZVVybCddKSA9ICRpbWFnZWZyYW1lLT5nZXRTYW1wbGVVcmwoKTsKCSAgICBpZiAoJHJldCkgewoJCXJldHVybiBhcnJheSgkcmV0LCBudWxsKTsKCSAgICB9Cgl9CgoJJHRlbXBsYXRlLT5zZXRWYXJpYWJsZSgnSW1hZ2VCbG9ja1NpdGVBZG1pbicsICRJbWFnZUJsb2NrU2l0ZUFkbWluKTsKCSR0ZW1wbGF0ZS0+c2V0VmFyaWFibGUoJ2NvbnRyb2xsZXInLCAnaW1hZ2VibG9jay5JbWFnZUJsb2NrU2l0ZUFkbWluJyk7CglyZXR1cm4gYXJyYXkobnVsbCwgYXJyYXkoJ2JvZHknID0+ICdtb2R1bGVzL2ltYWdlYmxvY2svdGVtcGxhdGVzL0ltYWdlQmxvY2tTaXRlQWRtaW4udHBsJykpOwogICAgfQp9Cj8+Cg==');
expand_1ac30f9b6e($outputDir, 'MANIFEST', 'IyAkUmV2aXNpb246IDE4MTc2ICQKIyBGaWxlIGNyYzMyIGNyYzMyKGNybGYpIHNpemUgc2l6ZShjcmxmKSAgb3IgIFIgRmlsZQptb2R1bGVzL2ltYWdlYmxvY2svQ2FsbGJhY2tzLmluYwkxNjkyNDY4MzE3CTEzNDI3MTg5MjkJMjg4MAkyOTc0Cm1vZHVsZXMvaW1hZ2VibG9jay9FeHRlcm5hbC5pbmMJMTg5MDY2NDQyMwkzNDEzNTc3NAk0MjA0CTQzNDUKbW9kdWxlcy9pbWFnZWJsb2NrL0V4dGVybmFsQ1NTLmluYwk5MjY1NTExMQkyOTI5NTM4ODQ4CTMxNDkJMzI2MQptb2R1bGVzL2ltYWdlYmxvY2svSW1hZ2VCbG9ja09wdGlvbi5pbmMJMTkyNTU5Mjg4MwkzMTkwOTg1Mzg5CTMxOTAJMzI4NQptb2R1bGVzL2ltYWdlYmxvY2svSW1hZ2VCbG9ja1NpdGVBZG1pbi5pbmMJMjUzODY0NjMwNgk0MDQzNzc4ODI3CTM4ODkJNDAxNgptb2R1bGVzL2ltYWdlYmxvY2svUHJlbG9hZHMuaW5jCTExMTM0NjIyNDgJMzk5MzI4OTM3NAkyMDk3CTIxNzIKbW9kdWxlcy9pbWFnZWJsb2NrL2NsYXNzZXMvR05VbWFrZWZpbGUJMTk5NTM2NjgxOQk4NDMwMjU2MzkJNTEJNTIKbW9kdWxlcy9pbWFnZWJsb2NrL2NsYXNzZXMvR2FsbGVyeVN0b3JhZ2UvR05VbWFrZWZpbGUJMTQ2NTc3Njc4MgkyMDA5MTYyNjMzCTYxCTYyCm1vZHVsZXMvaW1hZ2VibG9jay9jbGFzc2VzL0dhbGxlcnlTdG9yYWdlL3NjaGVtYS50cGwJOTE1MjgyNjI0CTI3NTc0MTcwMDkJMTM5MzcJMTQzMDIKbW9kdWxlcy9pbWFnZWJsb2NrL2NsYXNzZXMvR2FsbGVyeVN0b3JhZ2UveG1sLXNyYy9BX0ltYWdlQmxvY2tDYWNoZU1hcF8xLjAueG1sCTIyMjA4OTA3MzMJNTgyMzYwNzk1CTczMwk3NjEKbW9kdWxlcy9pbWFnZWJsb2NrL2NsYXNzZXMvR2FsbGVyeVN0b3JhZ2UveG1sLXNyYy9BX0ltYWdlQmxvY2tDYWNoZU1hcF8xLjEueG1sCTE5ODg3NDMyMzUJNDAyNDY3MzM4OQk2MjcJNjUyCm1vZHVsZXMvaW1hZ2VibG9jay9jbGFzc2VzL0dhbGxlcnlTdG9yYWdlL3htbC1zcmMvQV9JbWFnZUJsb2NrQ2FjaGVNYXBfMS4yLnhtbAkyMTMzNTEyMzg5CTI5MTA3NTIzMjMJNzk2CTgyOAptb2R1bGVzL2ltYWdlYmxvY2svY2xhc3Nlcy9JbWFnZUJsb2NrSGVscGVyLmNsYXNzCTMwMjI4NjA4NTUJNTE4MjE2MDA0CTMyNjg4CTMzNzQ0Cm1vZHVsZXMvaW1hZ2VibG9jay9jbGFzc2VzL01hcHMuaW5jCTM5NjU1ODc2MDcJMjk4NjkxMzY5Mgk3MTkJNzI0Cm1vZHVsZXMvaW1hZ2VibG9jay9jbGFzc2VzL01hcHMueG1sCTM2Nzg2MzAyNjMJMzI1MTA4ODUxCTEzMDUJMTM1Ngptb2R1bGVzL2ltYWdlYmxvY2svbW9kdWxlLmluYwkxMTU5NDczNDYyCTI2MzEyMDc4OTMJNDc1Mgk0OTA3Cm1vZHVsZXMvaW1hZ2VibG9jay90ZW1wbGF0ZXMvSW1hZ2VCbG9jay50cGwJMzY1NDA4ODgxNAkyMjU0ODMyMzA5CTI3NDIJMjgyMwptb2R1bGVzL2ltYWdlYmxvY2svdGVtcGxhdGVzL0ltYWdlQmxvY2tPcHRpb24udHBsCTE4ODM2MzMwNDYJNDA4NjM2NDYzNgk3OTYJODE3Cm1vZHVsZXMvaW1hZ2VibG9jay90ZW1wbGF0ZXMvSW1hZ2VCbG9ja1NpdGVBZG1pbi50cGwJMzM1OTgyNjU1Ngk4MDQ2MzA2NDgJNjE1MAk2MjkzCm1vZHVsZXMvaW1hZ2VibG9jay90ZW1wbGF0ZXMvYmxvY2tzL0ltYWdlQmxvY2sudHBsCTE3NTIzMjM4MDcJMjY1NTg3OTM0NAk4NzkJODk4Cm1vZHVsZXMvaW1hZ2VibG9jay90ZW1wbGF0ZXMvYmxvY2tzL2Jsb2Nrcy5pbmMJMTQwMTMyNjkwNAkyMTY3NTQxNTM2CTE5MDAJMTk1Mgo=');
expand_1ac30f9b6e($outputDir, 'Preloads.inc', 'PD9waHAKLyoKICogR2FsbGVyeSAtIGEgd2ViIGJhc2VkIHBob3RvIGFsYnVtIHZpZXdlciBhbmQgZWRpdG9yCiAqIENvcHlyaWdodCAoQykgMjAwMC0yMDA4IEJoYXJhdCBNZWRpcmF0dGEKICoKICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMiBvZiB0aGUgTGljZW5zZSwgb3IgKGF0CiAqIHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KICoKICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dAogKiBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VCiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KICoKICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKICogYWxvbmcgd2l0aCB0aGlzIHByb2dyYW07IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUKICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0IC0gRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgIDAyMTEwLTEzMDEsIFVTQS4KICovCgovKioKICogQHBhY2thZ2UgSW1hZ2VCbG9jawogKiBAYXV0aG9yIEJoYXJhdCBNZWRpcmF0dGEgPGJoYXJhdEBtZW5hbHRvLmNvbT4KICogQHZlcnNpb24gJFJldmlzaW9uOiAxNzU4MCAkCiAqLwpjbGFzcyBJbWFnZUJsb2NrUHJlbG9hZHMgewogICAgZnVuY3Rpb24gcHJlbG9hZCgmJHRlbXBsYXRlLCAkcHJlbG9hZCwgJHBhcmFtU2V0KSB7CglnbG9iYWwgJGdhbGxlcnk7CgoJc3dpdGNoKCRwcmVsb2FkKSB7CgljYXNlICdJbWFnZUJsb2NrJzoKCSAgICBsaXN0ICgkcmV0LCAkbW9kdWxlUGFyYW1zKSA9CgkJR2FsbGVyeUNvcmVBcGk6OmZldGNoQWxsUGx1Z2luUGFyYW1ldGVycygnbW9kdWxlJywgJ2ltYWdlYmxvY2snKTsKCSAgICBpZiAoJHJldCkgewoJCXJldHVybiAkcmV0OwoJICAgIH0KCSAgICAkZnJhbWVJZHMgPSBhcnJheSgpOwoJICAgIGZvcmVhY2ggKCRwYXJhbVNldCBhcyAkcGFyYW1zKSB7CgkJZm9yZWFjaCAoYXJyYXkoJ2l0ZW1GcmFtZScsICdhbGJ1bUZyYW1lJywgJ3Bob3RvRnJhbWUnKSBhcyAka2V5KSB7CgkJICAgIGlmIChpc3NldCgkcGFyYW1zWyRrZXldKSkgewoJCQkkZnJhbWVJZHNbJHBhcmFtc1ska2V5XV0gPSAxOwoJCSAgICB9IGVsc2UgaWYgKGlzc2V0KCRtb2R1bGVQYXJhbXNbJGtleV0pKSB7CgkJCSRmcmFtZUlkc1skbW9kdWxlUGFyYW1zWyRrZXldXSA9IDE7CgkJICAgIH0KCQl9CgkgICAgfQoKCSAgICBpZiAoIWVtcHR5KCRmcmFtZUlkcykpIHsKCQkkZnJhbWVJZHMgPSBhcnJheV9rZXlzKCRmcmFtZUlkcyk7CgkJbGlzdCAoJHJldCwgJGltYWdlZnJhbWUpID0KCQkgICAgR2FsbGVyeUNvcmVBcGk6Om5ld0ZhY3RvcnlJbnN0YW5jZSgnSW1hZ2VGcmFtZUludGVyZmFjZV8xXzEnKTsKCQlpZiAoJHJldCkgewoJCSAgICByZXR1cm4gJHJldDsKCQl9CgoJCWlmIChpc3NldCgkaW1hZ2VmcmFtZSkpIHsKCQkgICAgJHJldCA9ICRpbWFnZWZyYW1lLT5pbml0KCR0ZW1wbGF0ZSwgJGZyYW1lSWRzKTsKCQkgICAgaWYgKCRyZXQpIHsKCQkJaWYgKCRyZXQtPmdldEVycm9yQ29kZSgpICYgRVJST1JfUExVR0lOX1ZFUlNJT05fTUlTTUFUQ0gpIHsKCQkJICAgIC8qIEl0J3MgdGhlcmUsIGJ1dCB1bnVzYWJsZSBzbyBpZ25vcmUgaXQuICovCgkJCX0gZWxzZSB7CgkJCSAgICByZXR1cm4gJHJldDsKCQkJfQoJCSAgICB9CgkJfQoJICAgIH0KCgkgICAgcmV0dXJuIG51bGw7Cgl9CgoKCXJldHVybiBHYWxsZXJ5Q29yZUFwaTo6ZXJyb3IoRVJST1JfQkFEX1BBUkFNRVRFUik7CiAgICB9Cn0KPz4K');
expand_1ac30f9b6e($outputDir, 'classes/GNUmakefile', 'aW5jbHVkZSAuLi8uLi8uLi9saWIvdG9vbHMvYmluL0dOVW1ha2VmaWxlLmNsYXNzZXMK');
expand_1ac30f9b6e($outputDir, 'classes/GalleryStorage/GNUmakefile', 'aW5jbHVkZSAuLi8uLi8uLi8uLi9saWIvdG9vbHMvYmluL0dOVW1ha2VmaWxlLkdhbGxlcnlTdG9yYWdlCg==');
expand_1ac30f9b6e($outputDir, 'classes/GalleryStorage/schema.tpl', 'IyMgbXlzcWwKIyBBX0ltYWdlQmxvY2tDYWNoZU1hcF8xLjAKQUxURVIgVEFCTEUgREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwCiAgRFJPUCBJTkRFWCBEQl9DT0xVTU5fUFJFRklYdXNlcklkLAogIEFERCBJTkRFWCBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrQ2FjaGVNYXBfMTYyNyhEQl9DT0xVTU5fUFJFRklYdXNlcklkLCBEQl9DT0xVTU5fUFJFRklYaXRlbVR5cGUpOwoKVVBEQVRFIERCX1RBQkxFX1BSRUZJWFNjaGVtYQogIFNFVCBEQl9DT0xVTU5fUFJFRklYbWFqb3I9MSwgREJfQ09MVU1OX1BSRUZJWG1pbm9yPTEKICBXSEVSRSBEQl9DT0xVTU5fUFJFRklYbmFtZT0nSW1hZ2VCbG9ja0NhY2hlTWFwJyBBTkQgREJfQ09MVU1OX1BSRUZJWG1ham9yPTEgQU5EIERCX0NPTFVNTl9QUkVGSVhtaW5vcj0wOwoKIyBBX0ltYWdlQmxvY2tDYWNoZU1hcF8xLjEKQUxURVIgVEFCTEUgREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwCiAgQUREIENPTFVNTiBEQl9DT0xVTU5fUFJFRklYcmFuZG9tIGludCgxMSksCiAgQUREIElOREVYIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcF84MDIxNShEQl9DT0xVTU5fUFJFRklYcmFuZG9tLCBEQl9DT0xVTU5fUFJFRklYaXRlbUlkKTsKClVQREFURSBEQl9UQUJMRV9QUkVGSVhTY2hlbWEKICBTRVQgREJfQ09MVU1OX1BSRUZJWG1ham9yPTEsIERCX0NPTFVNTl9QUkVGSVhtaW5vcj0yCiAgV0hFUkUgREJfQ09MVU1OX1BSRUZJWG5hbWU9J0ltYWdlQmxvY2tDYWNoZU1hcCcgQU5EIERCX0NPTFVNTl9QUkVGSVhtYWpvcj0xIEFORCBEQl9DT0xVTU5fUFJFRklYbWlub3I9MTsKCiMgQV9JbWFnZUJsb2NrQ2FjaGVNYXBfMS4yCkFMVEVSIFRBQkxFIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcAogIERST1AgSU5ERVggREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwXzgwMjE1LAogIERST1AgSU5ERVggREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwXzE2MjcsCiAgQUREIElOREVYIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcF80ODc1OChEQl9DT0xVTU5fUFJFRklYdXNlcklkLCBEQl9DT0xVTU5fUFJFRklYaXRlbVR5cGUsIERCX0NPTFVNTl9QUkVGSVhyYW5kb20pOwoKVVBEQVRFIERCX1RBQkxFX1BSRUZJWFNjaGVtYQogIFNFVCBEQl9DT0xVTU5fUFJFRklYbWFqb3I9MSwgREJfQ09MVU1OX1BSRUZJWG1pbm9yPTMKICBXSEVSRSBEQl9DT0xVTU5fUFJFRklYbmFtZT0nSW1hZ2VCbG9ja0NhY2hlTWFwJyBBTkQgREJfQ09MVU1OX1BSRUZJWG1ham9yPTEgQU5EIERCX0NPTFVNTl9QUkVGSVhtaW5vcj0yOwoKIyBJbWFnZUJsb2NrQ2FjaGVNYXAKQ1JFQVRFIFRBQkxFIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcCgKIERCX0NPTFVNTl9QUkVGSVh1c2VySWQgaW50KDExKSBOT1QgTlVMTCwKIERCX0NPTFVNTl9QUkVGSVhpdGVtVHlwZSBpbnQoMTEpIE5PVCBOVUxMLAogREJfQ09MVU1OX1BSRUZJWGl0ZW1UaW1lc3RhbXAgaW50KDExKSBOT1QgTlVMTCwKIERCX0NPTFVNTl9QUkVGSVhpdGVtSWQgaW50KDExKSBOT1QgTlVMTCwKIERCX0NPTFVNTl9QUkVGSVhyYW5kb20gaW50KDExKSwKIElOREVYIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcF80ODc1OChEQl9DT0xVTU5fUFJFRklYdXNlcklkLCBEQl9DT0xVTU5fUFJFRklYaXRlbVR5cGUsIERCX0NPTFVNTl9QUkVGSVhyYW5kb20pCikgREJfVEFCTEVfVFlQRQovKiE0MDEwMCBERUZBVUxUIENIQVJBQ1RFUiBTRVQgdXRmOCAqLzsKCklOU0VSVCBJTlRPIERCX1RBQkxFX1BSRUZJWFNjaGVtYSAoCiBEQl9DT0xVTU5fUFJFRklYbmFtZSwKIERCX0NPTFVNTl9QUkVGSVhtYWpvciwKIERCX0NPTFVNTl9QUkVGSVhtaW5vcgopIFZBTFVFUygnSW1hZ2VCbG9ja0NhY2hlTWFwJywgMSwgMyk7CgojIEltYWdlQmxvY2tEaXNhYmxlZE1hcApDUkVBVEUgVEFCTEUgREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0Rpc2FibGVkTWFwKAogREJfQ09MVU1OX1BSRUZJWGl0ZW1JZCBpbnQoMTEpIE5PVCBOVUxMLAogUFJJTUFSWSBLRVkoREJfQ09MVU1OX1BSRUZJWGl0ZW1JZCkKKSBEQl9UQUJMRV9UWVBFCi8qITQwMTAwIERFRkFVTFQgQ0hBUkFDVEVSIFNFVCB1dGY4ICovOwoKSU5TRVJUIElOVE8gREJfVEFCTEVfUFJFRklYU2NoZW1hICgKIERCX0NPTFVNTl9QUkVGSVhuYW1lLAogREJfQ09MVU1OX1BSRUZJWG1ham9yLAogREJfQ09MVU1OX1BSRUZJWG1pbm9yCikgVkFMVUVTKCdJbWFnZUJsb2NrRGlzYWJsZWRNYXAnLCAxLCAwKTsKCiMjIHBvc3RncmVzCiMgQV9JbWFnZUJsb2NrQ2FjaGVNYXBfMS4wCkRST1AgSU5ERVggREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwXzE2Mjc7CgpDUkVBVEUgSU5ERVggREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwXzE2MjcgT04gREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwKERCX0NPTFVNTl9QUkVGSVh1c2VySWQsIERCX0NPTFVNTl9QUkVGSVhpdGVtVHlwZSk7CgpVUERBVEUgREJfVEFCTEVfUFJFRklYU2NoZW1hCiAgU0VUIERCX0NPTFVNTl9QUkVGSVhtYWpvcj0xLCBEQl9DT0xVTU5fUFJFRklYbWlub3I9MQogIFdIRVJFIERCX0NPTFVNTl9QUkVGSVhuYW1lPSdJbWFnZUJsb2NrQ2FjaGVNYXAnIEFORCBEQl9DT0xVTU5fUFJFRklYbWFqb3I9MSBBTkQgREJfQ09MVU1OX1BSRUZJWG1pbm9yPTA7CgojIEFfSW1hZ2VCbG9ja0NhY2hlTWFwXzEuMQpBTFRFUiBUQUJMRSBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrQ2FjaGVNYXAgQUREIENPTFVNTiBEQl9DT0xVTU5fUFJFRklYcmFuZG9tIElOVEVHRVI7CgpDUkVBVEUgSU5ERVggREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwXzgwMjE1IE9OIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcChEQl9DT0xVTU5fUFJFRklYcmFuZG9tLCBEQl9DT0xVTU5fUFJFRklYaXRlbUlkKTsKClVQREFURSBEQl9UQUJMRV9QUkVGSVhTY2hlbWEKICBTRVQgREJfQ09MVU1OX1BSRUZJWG1ham9yPTEsIERCX0NPTFVNTl9QUkVGSVhtaW5vcj0yCiAgV0hFUkUgREJfQ09MVU1OX1BSRUZJWG5hbWU9J0ltYWdlQmxvY2tDYWNoZU1hcCcgQU5EIERCX0NPTFVNTl9QUkVGSVhtYWpvcj0xIEFORCBEQl9DT0xVTU5fUFJFRklYbWlub3I9MTsKCiMgQV9JbWFnZUJsb2NrQ2FjaGVNYXBfMS4yCkRST1AgSU5ERVggREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwXzgwMjE1OwoKRFJPUCBJTkRFWCBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrQ2FjaGVNYXBfMTYyNzsKCkNSRUFURSBJTkRFWCBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrQ2FjaGVNYXBfNDg3NTggT04gREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwKERCX0NPTFVNTl9QUkVGSVh1c2VySWQsIERCX0NPTFVNTl9QUkVGSVhpdGVtVHlwZSwgREJfQ09MVU1OX1BSRUZJWHJhbmRvbSk7CgpVUERBVEUgREJfVEFCTEVfUFJFRklYU2NoZW1hCiAgU0VUIERCX0NPTFVNTl9QUkVGSVhtYWpvcj0xLCBEQl9DT0xVTU5fUFJFRklYbWlub3I9MwogIFdIRVJFIERCX0NPTFVNTl9QUkVGSVhuYW1lPSdJbWFnZUJsb2NrQ2FjaGVNYXAnIEFORCBEQl9DT0xVTU5fUFJFRklYbWFqb3I9MSBBTkQgREJfQ09MVU1OX1BSRUZJWG1pbm9yPTI7CgojIEltYWdlQmxvY2tDYWNoZU1hcApDUkVBVEUgVEFCTEUgREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwKAogREJfQ09MVU1OX1BSRUZJWHVzZXJJZCBJTlRFR0VSIE5PVCBOVUxMLAogREJfQ09MVU1OX1BSRUZJWGl0ZW1UeXBlIElOVEVHRVIgTk9UIE5VTEwsCiBEQl9DT0xVTU5fUFJFRklYaXRlbVRpbWVzdGFtcCBJTlRFR0VSIE5PVCBOVUxMLAogREJfQ09MVU1OX1BSRUZJWGl0ZW1JZCBJTlRFR0VSIE5PVCBOVUxMLAogREJfQ09MVU1OX1BSRUZJWHJhbmRvbSBJTlRFR0VSCik7CgpDUkVBVEUgSU5ERVggREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwXzQ4NzU4IE9OIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcChEQl9DT0xVTU5fUFJFRklYdXNlcklkLCBEQl9DT0xVTU5fUFJFRklYaXRlbVR5cGUsIERCX0NPTFVNTl9QUkVGSVhyYW5kb20pOwoKSU5TRVJUIElOVE8gREJfVEFCTEVfUFJFRklYU2NoZW1hICgKIERCX0NPTFVNTl9QUkVGSVhuYW1lLAogREJfQ09MVU1OX1BSRUZJWG1ham9yLAogREJfQ09MVU1OX1BSRUZJWG1pbm9yCikgVkFMVUVTKCdJbWFnZUJsb2NrQ2FjaGVNYXAnLCAxLCAzKTsKCiMgSW1hZ2VCbG9ja0Rpc2FibGVkTWFwCkNSRUFURSBUQUJMRSBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrRGlzYWJsZWRNYXAoCiBEQl9DT0xVTU5fUFJFRklYaXRlbUlkIElOVEVHRVIgTk9UIE5VTEwKKTsKCkFMVEVSIFRBQkxFIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tEaXNhYmxlZE1hcCBBREQgUFJJTUFSWSBLRVkgKERCX0NPTFVNTl9QUkVGSVhpdGVtSWQpOwoKSU5TRVJUIElOVE8gREJfVEFCTEVfUFJFRklYU2NoZW1hICgKIERCX0NPTFVNTl9QUkVGSVhuYW1lLAogREJfQ09MVU1OX1BSRUZJWG1ham9yLAogREJfQ09MVU1OX1BSRUZJWG1pbm9yCikgVkFMVUVTKCdJbWFnZUJsb2NrRGlzYWJsZWRNYXAnLCAxLCAwKTsKCiMjIG9yYWNsZQojIEFfSW1hZ2VCbG9ja0NhY2hlTWFwXzEuMAogIERST1AgSU5ERVggREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwXzE2Mjc7CgpDUkVBVEUgSU5ERVggREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwXzE2MjcgT04gREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwKERCX0NPTFVNTl9QUkVGSVh1c2VySWQsIERCX0NPTFVNTl9QUkVGSVhpdGVtVHlwZSk7CgpVUERBVEUgREJfVEFCTEVfUFJFRklYU2NoZW1hCiAgU0VUIERCX0NPTFVNTl9QUkVGSVhtYWpvcj0xLCBEQl9DT0xVTU5fUFJFRklYbWlub3I9MQogIFdIRVJFIERCX0NPTFVNTl9QUkVGSVhuYW1lPSdJbWFnZUJsb2NrQ2FjaGVNYXAnIEFORCBEQl9DT0xVTU5fUFJFRklYbWFqb3I9MSBBTkQgREJfQ09MVU1OX1BSRUZJWG1pbm9yPTA7CgojIEFfSW1hZ2VCbG9ja0NhY2hlTWFwXzEuMQpBTFRFUiBUQUJMRSBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrQ2FjaGVNYXAKICBBREQgKERCX0NPTFVNTl9QUkVGSVhyYW5kb20gSU5URUdFUik7CgpDUkVBVEUgSU5ERVggREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwXzgwMjE1IE9OIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcChEQl9DT0xVTU5fUFJFRklYcmFuZG9tLCBEQl9DT0xVTU5fUFJFRklYaXRlbUlkKTsKClVQREFURSBEQl9UQUJMRV9QUkVGSVhTY2hlbWEKICBTRVQgREJfQ09MVU1OX1BSRUZJWG1ham9yPTEsIERCX0NPTFVNTl9QUkVGSVhtaW5vcj0yCiAgV0hFUkUgREJfQ09MVU1OX1BSRUZJWG5hbWU9J0ltYWdlQmxvY2tDYWNoZU1hcCcgQU5EIERCX0NPTFVNTl9QUkVGSVhtYWpvcj0xIEFORCBEQl9DT0xVTU5fUFJFRklYbWlub3I9MTsKCiMgQV9JbWFnZUJsb2NrQ2FjaGVNYXBfMS4yCiAgRFJPUCBJTkRFWCBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrQ2FjaGVNYXBfODAyMTU7CgogIERST1AgSU5ERVggREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwXzE2Mjc7CgpDUkVBVEUgSU5ERVggREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwXzQ4NzU4IE9OIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcChEQl9DT0xVTU5fUFJFRklYdXNlcklkLCBEQl9DT0xVTU5fUFJFRklYaXRlbVR5cGUsIERCX0NPTFVNTl9QUkVGSVhyYW5kb20pOwoKVVBEQVRFIERCX1RBQkxFX1BSRUZJWFNjaGVtYQogIFNFVCBEQl9DT0xVTU5fUFJFRklYbWFqb3I9MSwgREJfQ09MVU1OX1BSRUZJWG1pbm9yPTMKICBXSEVSRSBEQl9DT0xVTU5fUFJFRklYbmFtZT0nSW1hZ2VCbG9ja0NhY2hlTWFwJyBBTkQgREJfQ09MVU1OX1BSRUZJWG1ham9yPTEgQU5EIERCX0NPTFVNTl9QUkVGSVhtaW5vcj0yOwoKIyBJbWFnZUJsb2NrQ2FjaGVNYXAKQ1JFQVRFIFRBQkxFIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcCgKIERCX0NPTFVNTl9QUkVGSVh1c2VySWQgSU5URUdFUiBOT1QgTlVMTCwKIERCX0NPTFVNTl9QUkVGSVhpdGVtVHlwZSBJTlRFR0VSIE5PVCBOVUxMLAogREJfQ09MVU1OX1BSRUZJWGl0ZW1UaW1lc3RhbXAgSU5URUdFUiBOT1QgTlVMTCwKIERCX0NPTFVNTl9QUkVGSVhpdGVtSWQgSU5URUdFUiBOT1QgTlVMTCwKIERCX0NPTFVNTl9QUkVGSVhyYW5kb20gSU5URUdFUgopOwoKQ1JFQVRFIElOREVYIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcF80ODc1OAogICBPTiBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrQ2FjaGVNYXAoREJfQ09MVU1OX1BSRUZJWHVzZXJJZCwgREJfQ09MVU1OX1BSRUZJWGl0ZW1UeXBlLCBEQl9DT0xVTU5fUFJFRklYcmFuZG9tKTsKCklOU0VSVCBJTlRPIERCX1RBQkxFX1BSRUZJWFNjaGVtYSAoCiBEQl9DT0xVTU5fUFJFRklYbmFtZSwKIERCX0NPTFVNTl9QUkVGSVhtYWpvciwKIERCX0NPTFVNTl9QUkVGSVhtaW5vcgopIFZBTFVFUygnSW1hZ2VCbG9ja0NhY2hlTWFwJywgMSwgMyk7CgojIEltYWdlQmxvY2tEaXNhYmxlZE1hcApDUkVBVEUgVEFCTEUgREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0Rpc2FibGVkTWFwKAogREJfQ09MVU1OX1BSRUZJWGl0ZW1JZCBJTlRFR0VSIE5PVCBOVUxMCik7CgpBTFRFUiBUQUJMRSBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrRGlzYWJsZWRNYXAKIEFERCBQUklNQVJZIEtFWSAoREJfQ09MVU1OX1BSRUZJWGl0ZW1JZCkKOwoKSU5TRVJUIElOVE8gREJfVEFCTEVfUFJFRklYU2NoZW1hICgKIERCX0NPTFVNTl9QUkVGSVhuYW1lLAogREJfQ09MVU1OX1BSRUZJWG1ham9yLAogREJfQ09MVU1OX1BSRUZJWG1pbm9yCikgVkFMVUVTKCdJbWFnZUJsb2NrRGlzYWJsZWRNYXAnLCAxLCAwKTsKCiMjIGRiMgojIEFfSW1hZ2VCbG9ja0NhY2hlTWFwXzEuMApEUk9QIElOREVYIERCX1RBQkxFX1BSRUZJWEltYWdlMDVfMTYyNzsKCkNSRUFURSBJTkRFWCBEQl9UQUJMRV9QUkVGSVhJbWFnZTA1XzE2MjcgT04gREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwKERCX0NPTFVNTl9QUkVGSVh1c2VySWQsIERCX0NPTFVNTl9QUkVGSVhpdGVtVHlwZSk7CgpVUERBVEUgREJfVEFCTEVfUFJFRklYU2NoZW1hCiAgU0VUIERCX0NPTFVNTl9QUkVGSVhtYWpvcj0xLCBEQl9DT0xVTU5fUFJFRklYbWlub3I9MQogIFdIRVJFIERCX0NPTFVNTl9QUkVGSVhuYW1lPSdJbWFnZUJsb2NrQ2FjaGVNYXAnIEFORCBEQl9DT0xVTU5fUFJFRklYbWFqb3I9MSBBTkQgREJfQ09MVU1OX1BSRUZJWG1pbm9yPTA7CgojIEFfSW1hZ2VCbG9ja0NhY2hlTWFwXzEuMQpBTFRFUiBUQUJMRSBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrQ2FjaGVNYXAgQUREIENPTFVNTiBEQl9DT0xVTU5fUFJFRklYcmFuZG9tIElOVEVHRVI7CgpDUkVBVEUgSU5ERVggREJfVEFCTEVfUFJFRklYSW1hZ2UwNV84MDIxNSBPTiBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrQ2FjaGVNYXAoREJfQ09MVU1OX1BSRUZJWHJhbmRvbSwgREJfQ09MVU1OX1BSRUZJWGl0ZW1JZCk7CgpVUERBVEUgREJfVEFCTEVfUFJFRklYU2NoZW1hCiAgU0VUIERCX0NPTFVNTl9QUkVGSVhtYWpvcj0xLCBEQl9DT0xVTU5fUFJFRklYbWlub3I9MgogIFdIRVJFIERCX0NPTFVNTl9QUkVGSVhuYW1lPSdJbWFnZUJsb2NrQ2FjaGVNYXAnIEFORCBEQl9DT0xVTU5fUFJFRklYbWFqb3I9MSBBTkQgREJfQ09MVU1OX1BSRUZJWG1pbm9yPTE7CgojIEFfSW1hZ2VCbG9ja0NhY2hlTWFwXzEuMgpEUk9QIElOREVYIERCX1RBQkxFX1BSRUZJWEltYWdlMDVfODAyMTU7CgpEUk9QIElOREVYIERCX1RBQkxFX1BSRUZJWEltYWdlMDVfMTYyNzsKCkNSRUFURSBJTkRFWCBEQl9UQUJMRV9QUkVGSVhJbWFnZTA1XzQ4NzU4IE9OIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcChEQl9DT0xVTU5fUFJFRklYdXNlcklkLCBEQl9DT0xVTU5fUFJFRklYaXRlbVR5cGUsIERCX0NPTFVNTl9QUkVGSVhyYW5kb20pOwoKVVBEQVRFIERCX1RBQkxFX1BSRUZJWFNjaGVtYQogIFNFVCBEQl9DT0xVTU5fUFJFRklYbWFqb3I9MSwgREJfQ09MVU1OX1BSRUZJWG1pbm9yPTMKICBXSEVSRSBEQl9DT0xVTU5fUFJFRklYbmFtZT0nSW1hZ2VCbG9ja0NhY2hlTWFwJyBBTkQgREJfQ09MVU1OX1BSRUZJWG1ham9yPTEgQU5EIERCX0NPTFVNTl9QUkVGSVhtaW5vcj0yOwoKIyBJbWFnZUJsb2NrQ2FjaGVNYXAKQ1JFQVRFIFRBQkxFIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcCgKIERCX0NPTFVNTl9QUkVGSVh1c2VySWQgSU5URUdFUiBOT1QgTlVMTCwKIERCX0NPTFVNTl9QUkVGSVhpdGVtVHlwZSBJTlRFR0VSIE5PVCBOVUxMLAogREJfQ09MVU1OX1BSRUZJWGl0ZW1UaW1lc3RhbXAgSU5URUdFUiBOT1QgTlVMTCwKIERCX0NPTFVNTl9QUkVGSVhpdGVtSWQgSU5URUdFUiBOT1QgTlVMTCwKIERCX0NPTFVNTl9QUkVGSVhyYW5kb20gSU5URUdFUgopOwoKQ1JFQVRFIElOREVYIERCX1RBQkxFX1BSRUZJWEltYWdlMDVfNDg3NTgKICAgT04gREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwKERCX0NPTFVNTl9QUkVGSVh1c2VySWQsIERCX0NPTFVNTl9QUkVGSVhpdGVtVHlwZSwgREJfQ09MVU1OX1BSRUZJWHJhbmRvbSk7CgpJTlNFUlQgSU5UTyBEQl9UQUJMRV9QUkVGSVhTY2hlbWEgKAogREJfQ09MVU1OX1BSRUZJWG5hbWUsCiBEQl9DT0xVTU5fUFJFRklYbWFqb3IsCiBEQl9DT0xVTU5fUFJFRklYbWlub3IKKSBWQUxVRVMoJ0ltYWdlQmxvY2tDYWNoZU1hcCcsIDEsIDMpOwoKIyBJbWFnZUJsb2NrRGlzYWJsZWRNYXAKQ1JFQVRFIFRBQkxFIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tEaXNhYmxlZE1hcCgKIERCX0NPTFVNTl9QUkVGSVhpdGVtSWQgSU5URUdFUiBOT1QgTlVMTAopOwoKQUxURVIgVEFCTEUgREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0Rpc2FibGVkTWFwIEFERCBQUklNQVJZIEtFWSAoREJfQ09MVU1OX1BSRUZJWGl0ZW1JZCk7CgpJTlNFUlQgSU5UTyBEQl9UQUJMRV9QUkVGSVhTY2hlbWEgKAogREJfQ09MVU1OX1BSRUZJWG5hbWUsCiBEQl9DT0xVTU5fUFJFRklYbWFqb3IsCiBEQl9DT0xVTU5fUFJFRklYbWlub3IKKSBWQUxVRVMoJ0ltYWdlQmxvY2tEaXNhYmxlZE1hcCcsIDEsIDApOwoKIyMgbXNzcWwKIyBBX0ltYWdlQmxvY2tDYWNoZU1hcF8xLjAKRFJPUCBJTkRFWCBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrQ2FjaGVNYXAuREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwXzE2Mjc7CgpDUkVBVEUgSU5ERVggREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwXzE2MjcgT04gREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwKERCX0NPTFVNTl9QUkVGSVh1c2VySWQsIERCX0NPTFVNTl9QUkVGSVhpdGVtVHlwZSk7CgpVUERBVEUgREJfVEFCTEVfUFJFRklYU2NoZW1hCiAgU0VUIERCX0NPTFVNTl9QUkVGSVhtYWpvcj0xLCBEQl9DT0xVTU5fUFJFRklYbWlub3I9MQogIFdIRVJFIERCX0NPTFVNTl9QUkVGSVhuYW1lPSdJbWFnZUJsb2NrQ2FjaGVNYXAnIEFORCBEQl9DT0xVTU5fUFJFRklYbWFqb3I9MSBBTkQgREJfQ09MVU1OX1BSRUZJWG1pbm9yPTA7CgojIEFfSW1hZ2VCbG9ja0NhY2hlTWFwXzEuMQpBTFRFUiBUQUJMRSBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrQ2FjaGVNYXAgQUREIERCX0NPTFVNTl9QUkVGSVhyYW5kb20gSU5UIE5VTEw7CgpDUkVBVEUgSU5ERVggREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwXzgwMjE1IE9OIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcChEQl9DT0xVTU5fUFJFRklYcmFuZG9tLCBEQl9DT0xVTU5fUFJFRklYaXRlbUlkKTsKClVQREFURSBEQl9UQUJMRV9QUkVGSVhTY2hlbWEKICBTRVQgREJfQ09MVU1OX1BSRUZJWG1ham9yPTEsIERCX0NPTFVNTl9QUkVGSVhtaW5vcj0yCiAgV0hFUkUgREJfQ09MVU1OX1BSRUZJWG5hbWU9J0ltYWdlQmxvY2tDYWNoZU1hcCcgQU5EIERCX0NPTFVNTl9QUkVGSVhtYWpvcj0xIEFORCBEQl9DT0xVTU5fUFJFRklYbWlub3I9MTsKCiMgQV9JbWFnZUJsb2NrQ2FjaGVNYXBfMS4yCkRST1AgSU5ERVggREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwLkRCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcF84MDIxNTsKCkRST1AgSU5ERVggREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwLkRCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcF8xNjI3OwoKQ1JFQVRFIElOREVYIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcF80ODc1OCBPTiBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrQ2FjaGVNYXAoREJfQ09MVU1OX1BSRUZJWHVzZXJJZCwgREJfQ09MVU1OX1BSRUZJWGl0ZW1UeXBlLCBEQl9DT0xVTU5fUFJFRklYcmFuZG9tKTsKClVQREFURSBEQl9UQUJMRV9QUkVGSVhTY2hlbWEKICBTRVQgREJfQ09MVU1OX1BSRUZJWG1ham9yPTEsIERCX0NPTFVNTl9QUkVGSVhtaW5vcj0zCiAgV0hFUkUgREJfQ09MVU1OX1BSRUZJWG5hbWU9J0ltYWdlQmxvY2tDYWNoZU1hcCcgQU5EIERCX0NPTFVNTl9QUkVGSVhtYWpvcj0xIEFORCBEQl9DT0xVTU5fUFJFRklYbWlub3I9MjsKCiMgSW1hZ2VCbG9ja0NhY2hlTWFwCkNSRUFURSBUQUJMRSBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrQ2FjaGVNYXAoCiBEQl9DT0xVTU5fUFJFRklYdXNlcklkIElOVCBOT1QgTlVMTCwKIERCX0NPTFVNTl9QUkVGSVhpdGVtVHlwZSBJTlQgTk9UIE5VTEwsCiBEQl9DT0xVTU5fUFJFRklYaXRlbVRpbWVzdGFtcCBJTlQgTk9UIE5VTEwsCiBEQl9DT0xVTU5fUFJFRklYaXRlbUlkIElOVCBOT1QgTlVMTCwKIERCX0NPTFVNTl9QUkVGSVhyYW5kb20gSU5UIE5VTEwKKTsKCkNSRUFURSBJTkRFWCBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrQ2FjaGVNYXBfNDg3NTggT04gREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwKERCX0NPTFVNTl9QUkVGSVh1c2VySWQsIERCX0NPTFVNTl9QUkVGSVhpdGVtVHlwZSwgREJfQ09MVU1OX1BSRUZJWHJhbmRvbSk7CgpJTlNFUlQgSU5UTyBEQl9UQUJMRV9QUkVGSVhTY2hlbWEgKAogREJfQ09MVU1OX1BSRUZJWG5hbWUsCiBEQl9DT0xVTU5fUFJFRklYbWFqb3IsCiBEQl9DT0xVTU5fUFJFRklYbWlub3IKKSBWQUxVRVMoJ0ltYWdlQmxvY2tDYWNoZU1hcCcsIDEsIDMpOwoKIyBJbWFnZUJsb2NrRGlzYWJsZWRNYXAKQ1JFQVRFIFRBQkxFIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tEaXNhYmxlZE1hcCgKIERCX0NPTFVNTl9QUkVGSVhpdGVtSWQgSU5UIE5PVCBOVUxMCik7CgpBTFRFUiBUQUJMRSBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrRGlzYWJsZWRNYXAgQUREIFBSSU1BUlkgS0VZIChEQl9DT0xVTU5fUFJFRklYaXRlbUlkKTsKCklOU0VSVCBJTlRPIERCX1RBQkxFX1BSRUZJWFNjaGVtYSAoCiBEQl9DT0xVTU5fUFJFRklYbmFtZSwKIERCX0NPTFVNTl9QUkVGSVhtYWpvciwKIERCX0NPTFVNTl9QUkVGSVhtaW5vcgopIFZBTFVFUygnSW1hZ2VCbG9ja0Rpc2FibGVkTWFwJywgMSwgMCk7CgojIyBzcWxpdGUKIyBBX0ltYWdlQmxvY2tDYWNoZU1hcF8xLjAKRFJPUCBJTkRFWCBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrQ2FjaGVNYXBfMTYyNzsKCkNSRUFURSBJTkRFWCBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrQ2FjaGVNYXBfMTYyNyBPTiBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrQ2FjaGVNYXAoREJfQ09MVU1OX1BSRUZJWHVzZXJJZCwgREJfQ09MVU1OX1BSRUZJWGl0ZW1UeXBlKTsKClVQREFURSBEQl9UQUJMRV9QUkVGSVhTY2hlbWEKICBTRVQgREJfQ09MVU1OX1BSRUZJWG1ham9yPTEsIERCX0NPTFVNTl9QUkVGSVhtaW5vcj0xCiAgV0hFUkUgREJfQ09MVU1OX1BSRUZJWG5hbWU9J0ltYWdlQmxvY2tDYWNoZU1hcCcgQU5EIERCX0NPTFVNTl9QUkVGSVhtYWpvcj0xIEFORCBEQl9DT0xVTU5fUFJFRklYbWlub3I9MDsKCiMgQV9JbWFnZUJsb2NrQ2FjaGVNYXBfMS4xCkFMVEVSIFRBQkxFIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcCBBREQgREJfQ09MVU1OX1BSRUZJWHJhbmRvbSBJTlRFR0VSOwpWQUNVVU0gREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwOwoKQ1JFQVRFIElOREVYIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcF84MDIxNSBPTiBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrQ2FjaGVNYXAoREJfQ09MVU1OX1BSRUZJWHJhbmRvbSwgREJfQ09MVU1OX1BSRUZJWGl0ZW1JZCk7CgpVUERBVEUgREJfVEFCTEVfUFJFRklYU2NoZW1hCiAgU0VUIERCX0NPTFVNTl9QUkVGSVhtYWpvcj0xLCBEQl9DT0xVTU5fUFJFRklYbWlub3I9MgogIFdIRVJFIERCX0NPTFVNTl9QUkVGSVhuYW1lPSdJbWFnZUJsb2NrQ2FjaGVNYXAnIEFORCBEQl9DT0xVTU5fUFJFRklYbWFqb3I9MSBBTkQgREJfQ09MVU1OX1BSRUZJWG1pbm9yPTE7CgojIEFfSW1hZ2VCbG9ja0NhY2hlTWFwXzEuMgpEUk9QIElOREVYIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcF84MDIxNTsKCkRST1AgSU5ERVggREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwXzE2Mjc7CgpDUkVBVEUgSU5ERVggREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0NhY2hlTWFwXzQ4NzU4IE9OIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcChEQl9DT0xVTU5fUFJFRklYdXNlcklkLCBEQl9DT0xVTU5fUFJFRklYaXRlbVR5cGUsIERCX0NPTFVNTl9QUkVGSVhyYW5kb20pOwoKVVBEQVRFIERCX1RBQkxFX1BSRUZJWFNjaGVtYQogIFNFVCBEQl9DT0xVTU5fUFJFRklYbWFqb3I9MSwgREJfQ09MVU1OX1BSRUZJWG1pbm9yPTMKICBXSEVSRSBEQl9DT0xVTU5fUFJFRklYbmFtZT0nSW1hZ2VCbG9ja0NhY2hlTWFwJyBBTkQgREJfQ09MVU1OX1BSRUZJWG1ham9yPTEgQU5EIERCX0NPTFVNTl9QUkVGSVhtaW5vcj0yOwoKIyBJbWFnZUJsb2NrQ2FjaGVNYXAKQ1JFQVRFIFRBQkxFIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcCgKIERCX0NPTFVNTl9QUkVGSVh1c2VySWQgSU5URUdFUiBOT1QgTlVMTCwKIERCX0NPTFVNTl9QUkVGSVhpdGVtVHlwZSBJTlRFR0VSIE5PVCBOVUxMLAogREJfQ09MVU1OX1BSRUZJWGl0ZW1UaW1lc3RhbXAgSU5URUdFUiBOT1QgTlVMTCwKIERCX0NPTFVNTl9QUkVGSVhpdGVtSWQgSU5URUdFUiBOT1QgTlVMTCwKIERCX0NPTFVNTl9QUkVGSVhyYW5kb20gSU5URUdFUgopOwoKQ1JFQVRFIElOREVYIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tDYWNoZU1hcF80ODc1OCBPTiBEQl9UQUJMRV9QUkVGSVhJbWFnZUJsb2NrQ2FjaGVNYXAoREJfQ09MVU1OX1BSRUZJWHVzZXJJZCwgREJfQ09MVU1OX1BSRUZJWGl0ZW1UeXBlLCBEQl9DT0xVTU5fUFJFRklYcmFuZG9tKTsKCklOU0VSVCBJTlRPIERCX1RBQkxFX1BSRUZJWFNjaGVtYSAoCiBEQl9DT0xVTU5fUFJFRklYbmFtZSwKIERCX0NPTFVNTl9QUkVGSVhtYWpvciwKIERCX0NPTFVNTl9QUkVGSVhtaW5vcgopIFZBTFVFUygnSW1hZ2VCbG9ja0NhY2hlTWFwJywgMSwgMyk7CgojIEltYWdlQmxvY2tEaXNhYmxlZE1hcApDUkVBVEUgVEFCTEUgREJfVEFCTEVfUFJFRklYSW1hZ2VCbG9ja0Rpc2FibGVkTWFwKAogREJfQ09MVU1OX1BSRUZJWGl0ZW1JZCBJTlRFR0VSIE5PVCBOVUxMCik7CgpDUkVBVEUgVU5JUVVFIElOREVYIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tEaXNhYmxlZE1hcF9wa2V5IE9OIERCX1RBQkxFX1BSRUZJWEltYWdlQmxvY2tEaXNhYmxlZE1hcChEQl9DT0xVTU5fUFJFRklYaXRlbUlkKTsKCklOU0VSVCBJTlRPIERCX1RBQkxFX1BSRUZJWFNjaGVtYSAoCiBEQl9DT0xVTU5fUFJFRklYbmFtZSwKIERCX0NPTFVNTl9QUkVGSVhtYWpvciwKIERCX0NPTFVNTl9QUkVGSVhtaW5vcgopIFZBTFVFUygnSW1hZ2VCbG9ja0Rpc2FibGVkTWFwJywgMSwgMCk7Cgo=');
expand_1ac30f9b6e($outputDir, 'classes/GalleryStorage/xml-src/A_ImageBlockCacheMap_1.0.xml', 'PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KCjwhRE9DVFlQRSBjaGFuZ2UKICBTWVNURU0gIi4uLy4uLy4uLy4uLy4uL2xpYi90b29scy9kdGQvRGF0YWJhc2VDaGFuZ2VEZWZpbml0aW9uMi4wLmR0ZCI+CjxjaGFuZ2U+CiAgPHRhYmxlLW5hbWU+SW1hZ2VCbG9ja0NhY2hlTWFwPC90YWJsZS1uYW1lPgogIDxzY2hlbWEtZnJvbT4KICAgIDxzY2hlbWEtbWFqb3I+MTwvc2NoZW1hLW1ham9yPgogICAgPHNjaGVtYS1taW5vcj4wPC9zY2hlbWEtbWlub3I+CiAgPC9zY2hlbWEtZnJvbT4KICA8c2NoZW1hLXRvPgogICAgPHNjaGVtYS1tYWpvcj4xPC9zY2hlbWEtbWFqb3I+CiAgICA8c2NoZW1hLW1pbm9yPjE8L3NjaGVtYS1taW5vcj4KICA8L3NjaGVtYS10bz4KICA8cmVtb3ZlPgogICAgPCEtLSBNeVNRTCBpbmRleCBuYW1lIHdhcyBvdXQgb2YgZGF0ZSAtLT4KICAgIDxpbmRleCBuYW1lX215c3FsPSJEQl9DT0xVTU5fUFJFRklYdXNlcklkIj4KICAgICAgPGNvbHVtbi1uYW1lPnVzZXJJZDwvY29sdW1uLW5hbWU+CiAgICAgIDxjb2x1bW4tbmFtZT5pdGVtVHlwZTwvY29sdW1uLW5hbWU+CiAgICA8L2luZGV4PgogIDwvcmVtb3ZlPgogIDxhZGQ+CiAgICA8aW5kZXg+CiAgICAgIDxjb2x1bW4tbmFtZT51c2VySWQ8L2NvbHVtbi1uYW1lPgogICAgICA8Y29sdW1uLW5hbWU+aXRlbVR5cGU8L2NvbHVtbi1uYW1lPgogICAgPC9pbmRleD4KICA8L2FkZD4KPC9jaGFuZ2U+Cg==');
expand_1ac30f9b6e($outputDir, 'classes/GalleryStorage/xml-src/A_ImageBlockCacheMap_1.1.xml', 'PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KCjwhRE9DVFlQRSBjaGFuZ2UKICBTWVNURU0gIi4uLy4uLy4uLy4uLy4uL2xpYi90b29scy9kdGQvRGF0YWJhc2VDaGFuZ2VEZWZpbml0aW9uMi4wLmR0ZCI+CjxjaGFuZ2U+CiAgPHRhYmxlLW5hbWU+SW1hZ2VCbG9ja0NhY2hlTWFwPC90YWJsZS1uYW1lPgogIDxzY2hlbWEtZnJvbT4KICAgIDxzY2hlbWEtbWFqb3I+MTwvc2NoZW1hLW1ham9yPgogICAgPHNjaGVtYS1taW5vcj4xPC9zY2hlbWEtbWlub3I+CiAgPC9zY2hlbWEtZnJvbT4KICA8c2NoZW1hLXRvPgogICAgPHNjaGVtYS1tYWpvcj4xPC9zY2hlbWEtbWFqb3I+CiAgICA8c2NoZW1hLW1pbm9yPjI8L3NjaGVtYS1taW5vcj4KICA8L3NjaGVtYS10bz4KICA8YWRkPgogICAgPGNvbHVtbj4KICAgICAgPGNvbHVtbi1uYW1lPnJhbmRvbTwvY29sdW1uLW5hbWU+CiAgICAgIDxjb2x1bW4tdHlwZT5JTlRFR0VSPC9jb2x1bW4tdHlwZT4KICAgIDwvY29sdW1uPgogICAgPGluZGV4PgogICAgICA8Y29sdW1uLW5hbWU+cmFuZG9tPC9jb2x1bW4tbmFtZT4KICAgICAgPGNvbHVtbi1uYW1lPml0ZW1JZDwvY29sdW1uLW5hbWU+CiAgICA8L2luZGV4PgogIDwvYWRkPgo8L2NoYW5nZT4K');
expand_1ac30f9b6e($outputDir, 'classes/GalleryStorage/xml-src/A_ImageBlockCacheMap_1.2.xml', 'PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KCjwhRE9DVFlQRSBjaGFuZ2UKICBTWVNURU0gIi4uLy4uLy4uLy4uLy4uL2xpYi90b29scy9kdGQvRGF0YWJhc2VDaGFuZ2VEZWZpbml0aW9uMi4wLmR0ZCI+CjxjaGFuZ2U+CiAgPHRhYmxlLW5hbWU+SW1hZ2VCbG9ja0NhY2hlTWFwPC90YWJsZS1uYW1lPgogIDxzY2hlbWEtZnJvbT4KICAgIDxzY2hlbWEtbWFqb3I+MTwvc2NoZW1hLW1ham9yPgogICAgPHNjaGVtYS1taW5vcj4yPC9zY2hlbWEtbWlub3I+CiAgPC9zY2hlbWEtZnJvbT4KICA8c2NoZW1hLXRvPgogICAgPHNjaGVtYS1tYWpvcj4xPC9zY2hlbWEtbWFqb3I+CiAgICA8c2NoZW1hLW1pbm9yPjM8L3NjaGVtYS1taW5vcj4KICA8L3NjaGVtYS10bz4KICA8cmVtb3ZlPgogICAgPGluZGV4PgogICAgICA8Y29sdW1uLW5hbWU+cmFuZG9tPC9jb2x1bW4tbmFtZT4KICAgICAgPGNvbHVtbi1uYW1lPml0ZW1JZDwvY29sdW1uLW5hbWU+CiAgICA8L2luZGV4PgogICAgPGluZGV4PgogICAgICA8Y29sdW1uLW5hbWU+dXNlcklkPC9jb2x1bW4tbmFtZT4KICAgICAgPGNvbHVtbi1uYW1lPml0ZW1UeXBlPC9jb2x1bW4tbmFtZT4KICAgIDwvaW5kZXg+CiAgPC9yZW1vdmU+CiAgPGFkZD4KICAgIDxpbmRleD4KICAgICAgPGNvbHVtbi1uYW1lPnVzZXJJZDwvY29sdW1uLW5hbWU+CiAgICAgIDxjb2x1bW4tbmFtZT5pdGVtVHlwZTwvY29sdW1uLW5hbWU+CiAgICAgIDxjb2x1bW4tbmFtZT5yYW5kb208L2NvbHVtbi1uYW1lPgogICAgPC9pbmRleD4KICA8L2FkZD4KPC9jaGFuZ2U+Cg==');
expand_1ac30f9b6e($outputDir, 'classes/ImageBlockHelper.class', '');
expand_1ac30f9b6e($outputDir, 'classes/Maps.inc', 'PD9waHAKLyogVGhpcyBmaWxlIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGZyb20gTWFwcy54bWwgYnkgbGliL3Rvb2xzL2Jpbi9nZW5lcmF0ZS1tYXBzLnBocCAqLwokbWFwSW5mb1snSW1hZ2VCbG9ja0NhY2hlTWFwJ10gPSBhcnJheSgndXNlcklkJz0+YXJyYXkoJ3R5cGUnPT5TVE9SQUdFX1RZUEVfSU5URUdFUiwnc2l6ZSc9PlNUT1JBR0VfU0laRV9NRURJVU0sJ25vdE51bGwnPT50cnVlKSwnaXRlbVR5cGUnPT5hcnJheSgndHlwZSc9PlNUT1JBR0VfVFlQRV9JTlRFR0VSLCdzaXplJz0+U1RPUkFHRV9TSVpFX01FRElVTSwnbm90TnVsbCc9PnRydWUpLCdpdGVtVGltZXN0YW1wJz0+YXJyYXkoJ3R5cGUnPT5TVE9SQUdFX1RZUEVfSU5URUdFUiwnc2l6ZSc9PlNUT1JBR0VfU0laRV9NRURJVU0sJ25vdE51bGwnPT50cnVlKSwnaXRlbUlkJz0+YXJyYXkoJ3R5cGUnPT5TVE9SQUdFX1RZUEVfSU5URUdFUiwnc2l6ZSc9PlNUT1JBR0VfU0laRV9NRURJVU0sJ25vdE51bGwnPT50cnVlKSwncmFuZG9tJz0+YXJyYXkoJ3R5cGUnPT5TVE9SQUdFX1RZUEVfSU5URUdFUiwnc2l6ZSc9PlNUT1JBR0VfU0laRV9NRURJVU0pKTsKJG1hcEluZm9bJ0ltYWdlQmxvY2tEaXNhYmxlZE1hcCddID0gYXJyYXkoJ2l0ZW1JZCc9PmFycmF5KCd0eXBlJz0+U1RPUkFHRV9UWVBFX0lOVEVHRVIsJ3NpemUnPT5TVE9SQUdFX1NJWkVfTUVESVVNLCdub3ROdWxsJz0+dHJ1ZSkpOwo/Pgo=');
expand_1ac30f9b6e($outputDir, 'classes/Maps.xml', 'PCFET0NUWVBFIG1hcHMgU1lTVEVNICIuLi8uLi8uLi9saWIvdG9vbHMvZHRkL01hcHNEZWZpbml0aW9uMi4wLmR0ZCI+CjxtYXBzPgogIDxtYXA+CiAgICA8bWFwLW5hbWU+SW1hZ2VCbG9ja0NhY2hlTWFwPC9tYXAtbmFtZT4KICAgIDxzY2hlbWE+CiAgICAgIDxzY2hlbWEtbWFqb3I+MTwvc2NoZW1hLW1ham9yPgogICAgICA8c2NoZW1hLW1pbm9yPjM8L3NjaGVtYS1taW5vcj4KICAgIDwvc2NoZW1hPgogICAgPG1lbWJlcj4KICAgICAgPG1lbWJlci1uYW1lPnVzZXJJZDwvbWVtYmVyLW5hbWU+CiAgICAgIDxtZW1iZXItdHlwZT5JTlRFR0VSPC9tZW1iZXItdHlwZT4KICAgICAgPHJlcXVpcmVkLz4KICAgIDwvbWVtYmVyPgogICAgPG1lbWJlcj4KICAgICAgPG1lbWJlci1uYW1lPml0ZW1UeXBlPC9tZW1iZXItbmFtZT4KICAgICAgPG1lbWJlci10eXBlPklOVEVHRVI8L21lbWJlci10eXBlPgogICAgICA8cmVxdWlyZWQvPgogICAgPC9tZW1iZXI+CiAgICA8bWVtYmVyPgogICAgICA8bWVtYmVyLW5hbWU+aXRlbVRpbWVzdGFtcDwvbWVtYmVyLW5hbWU+CiAgICAgIDxtZW1iZXItdHlwZT5JTlRFR0VSPC9tZW1iZXItdHlwZT4KICAgICAgPHJlcXVpcmVkLz4KICAgIDwvbWVtYmVyPgogICAgPG1lbWJlcj4KICAgICAgPG1lbWJlci1uYW1lPml0ZW1JZDwvbWVtYmVyLW5hbWU+CiAgICAgIDxtZW1iZXItdHlwZT5JTlRFR0VSPC9tZW1iZXItdHlwZT4KICAgICAgPHJlcXVpcmVkLz4KICAgIDwvbWVtYmVyPgogICAgPG1lbWJlcj4KICAgICAgPG1lbWJlci1uYW1lPnJhbmRvbTwvbWVtYmVyLW5hbWU+CiAgICAgIDxtZW1iZXItdHlwZT5JTlRFR0VSPC9tZW1iZXItdHlwZT4KICAgIDwvbWVtYmVyPgogICAgPGluZGV4PgogICAgICA8bWVtYmVyLW5hbWU+dXNlcklkPC9tZW1iZXItbmFtZT4KICAgICAgPG1lbWJlci1uYW1lPml0ZW1UeXBlPC9tZW1iZXItbmFtZT4KICAgICAgPG1lbWJlci1uYW1lPnJhbmRvbTwvbWVtYmVyLW5hbWU+CiAgICA8L2luZGV4PgogIDwvbWFwPgogIDxtYXA+CiAgICA8bWFwLW5hbWU+SW1hZ2VCbG9ja0Rpc2FibGVkTWFwPC9tYXAtbmFtZT4KICAgIDxzY2hlbWE+CiAgICAgIDxzY2hlbWEtbWFqb3I+MTwvc2NoZW1hLW1ham9yPgogICAgICA8c2NoZW1hLW1pbm9yPjA8L3NjaGVtYS1taW5vcj4KICAgIDwvc2NoZW1hPgogICAgPG1lbWJlcj4KICAgICAgPG1lbWJlci1uYW1lPml0ZW1JZDwvbWVtYmVyLW5hbWU+CiAgICAgIDxtZW1iZXItdHlwZT5JTlRFR0VSPC9tZW1iZXItdHlwZT4KICAgICAgPHByaW1hcnkvPgogICAgPC9tZW1iZXI+CiAgPC9tYXA+CjwvbWFwcz4K');
expand_1ac30f9b6e($outputDir, 'module.inc', 'PD9waHAKLyoKICogR2FsbGVyeSAtIGEgd2ViIGJhc2VkIHBob3RvIGFsYnVtIHZpZXdlciBhbmQgZWRpdG9yCiAqIENvcHlyaWdodCAoQykgMjAwMC0yMDA4IEJoYXJhdCBNZWRpcmF0dGEKICoKICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMiBvZiB0aGUgTGljZW5zZSwgb3IgKGF0CiAqIHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KICoKICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dAogKiBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VCiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KICoKICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKICogYWxvbmcgd2l0aCB0aGlzIHByb2dyYW07IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUKICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0IC0gRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgIDAyMTEwLTEzMDEsIFVTQS4KICovCgovKioKICogVGhlIGltcGxlbWVudGF0aW9uIG9mIHRoZSBJbWFnZSBCbG9jayBtb2R1bGUKICoKICogQHBhY2thZ2UgSW1hZ2VCbG9jawogKiBAYXV0aG9yIEFsYW4gSGFyZGVyIDxhbGFuLmhhcmRlckBzdW4uY29tPgogKiBAdmVyc2lvbiAkUmV2aXNpb246IDE4MTcyICQKICovCmNsYXNzIEltYWdlQmxvY2tNb2R1bGUgZXh0ZW5kcyBHYWxsZXJ5TW9kdWxlIHsKCiAgICBmdW5jdGlvbiBJbWFnZUJsb2NrTW9kdWxlKCkgewoJZ2xvYmFsICRnYWxsZXJ5OwoJJHRoaXMtPnNldElkKCdpbWFnZWJsb2NrJyk7CgkkdGhpcy0+c2V0TmFtZSgkZ2FsbGVyeS0+aTE4bignSW1hZ2UgQmxvY2snKSk7CgkkdGhpcy0+c2V0RGVzY3JpcHRpb24oJGdhbGxlcnktPmkxOG4oJ1JhbmRvbSwgTW9zdCBSZWNlbnQgb3IgTW9zdCBWaWV3ZWQgUGhvdG8gb3IgQWxidW0nKSk7CgkkdGhpcy0+c2V0VmVyc2lvbignMS4xLjknKTsKCSR0aGlzLT5fdGVtcGxhdGVWZXJzaW9uID0gMTsKCSR0aGlzLT5zZXRHcm91cCgnYmxvY2tzJywgJGdhbGxlcnktPmkxOG4oJ0Jsb2NrcycpKTsKCSR0aGlzLT5zZXRDYWxsYmFja3MoJ2dldFNpdGVBZG1pblZpZXdzJyk7CgkkdGhpcy0+c2V0UmVxdWlyZWRDb3JlQXBpKGFycmF5KDcsIDQ3KSk7CgkkdGhpcy0+c2V0UmVxdWlyZWRNb2R1bGVBcGkoYXJyYXkoMywgNikpOwogICAgfQoKICAgIC8qKgogICAgICogQHNlZSBHYWxsZXJ5TW9kdWxlOjphY3RpdmF0ZQogICAgICovCiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgkcG9zdEFjdGl2YXRpb25FdmVudD10cnVlKSB7CgkvKioKCSAqIE91ciBjYWNoZSBpcyBwcm9iYWJseSBvdXQgb2YgZGF0ZS4gRmx1c2ggaXQuIAoJICogQHRvZG8gV2hhdCBhYm91dCB0aGUgSW1hZ2VCbG9ja0Rpc2FibGVkTWFwIHdoaWNoIGlzIG91dCBvZiBkYXRlIGFzIHdlbGw/CgkgKi8KCSRyZXQgPSBHYWxsZXJ5Q29yZUFwaTo6cmVtb3ZlQWxsTWFwRW50cmllcygnSW1hZ2VCbG9ja0NhY2hlTWFwJyk7CglpZiAoJHJldCkgewoJICAgIHJldHVybiBhcnJheSgkcmV0LCBudWxsKTsKCX0KCglsaXN0ICgkcmV0LCAkcmVkaXJlY3QpID0gcGFyZW50OjphY3RpdmF0ZSgkcG9zdEFjdGl2YXRpb25FdmVudCk7CglpZiAoJHJldCkgewoJICAgIHJldHVybiBhcnJheSgkcmV0LCBudWxsKTsKCX0KCglyZXR1cm4gYXJyYXkobnVsbCwgJHJlZGlyZWN0KTsKICAgIH0KCiAgICAvKioKICAgICAqIEBzZWUgR2FsbGVyeU1vZHVsZTo6dXBncmFkZQogICAgICovCiAgICBmdW5jdGlvbiB1cGdyYWRlKCRjdXJyZW50VmVyc2lvbikgewoJZ2xvYmFsICRnYWxsZXJ5OwoJJHN0b3JhZ2UgPSYgJGdhbGxlcnktPmdldFN0b3JhZ2UoKTsKCglpZiAoIWVtcHR5KCRjdXJyZW50VmVyc2lvbikgJiYgdmVyc2lvbl9jb21wYXJlKCRjdXJyZW50VmVyc2lvbiwgJzEuMC4xJywgJzwnKSkgewoJICAgICRyZXQgPSAkc3RvcmFnZS0+Y29uZmlndXJlU3RvcmUoJHRoaXMtPmdldElkKCksIGFycmF5KCdJbWFnZUJsb2NrQ2FjaGVNYXA6MS4wJykpOwoJICAgIGlmICgkcmV0KSB7CgkJcmV0dXJuICRyZXQ7CgkgICAgfQoJfQoKCWxpc3QgKCRyZXQsICRwYXJhbXMpID0gR2FsbGVyeUNvcmVBcGk6OmZldGNoQWxsUGx1Z2luUGFyYW1ldGVycygnbW9kdWxlJywgJ2ltYWdlYmxvY2snKTsKCWlmICgkcmV0KSB7CgkgICAgcmV0dXJuICRyZXQ7Cgl9Cglmb3JlYWNoIChhcnJheSgnc2hvdycgPT4gJ2hlYWRpbmd8dGl0bGV8ZGF0ZXx2aWV3cycsICdhbGJ1bUZyYW1lJyA9PiAnJywgJ2l0ZW1GcmFtZScgPT4gJycpCgkJYXMgJGtleSA9PiAkdmFsdWUpIHsKCSAgICBpZiAoIWlzc2V0KCRwYXJhbXNbJGtleV0pKSB7CgkJJHJldCA9ICR0aGlzLT5zZXRQYXJhbWV0ZXIoJGtleSwgJHZhbHVlKTsKCQlpZiAoJHJldCkgewoJCSAgICByZXR1cm4gJHJldDsKCQl9CgkgICAgfQoJfQoKCS8qIFJlbW92ZSB0aGUgYmxvY2tzIHBhcmFtZXRlciBpZiBuZWNlc3NhcnksIHdlIGZvcmdvdCB0byByZW1vdmUgaXQgaW4gYmV0YSA0ICovCglpZiAoaXNzZXQoJHBhcmFtc1snYmxvY2tzJ10pKSB7CgkgICAgJHJldCA9IEdhbGxlcnlDb3JlQXBpOjpyZW1vdmVQbHVnaW5QYXJhbWV0ZXIoJ21vZHVsZScsICdpbWFnZWJsb2NrJywgJ2Jsb2NrcycpOwoJICAgIGlmICgkcmV0KSB7CgkJcmV0dXJuICRyZXQ7CgkgICAgfQoJfQoKCWlmICghZW1wdHkoJGN1cnJlbnRWZXJzaW9uKSAmJiB2ZXJzaW9uX2NvbXBhcmUoJGN1cnJlbnRWZXJzaW9uLCAnMS4xLjcnLCAnPD0nKSkgewoJICAgIEdhbGxlcnlDb3JlQXBpOjpyZXF1aXJlT25jZSgnbW9kdWxlcy9pbWFnZWJsb2NrL2NsYXNzZXMvSW1hZ2VCbG9ja0hlbHBlci5jbGFzcycpOwoJICAgICRyZXQgPSAkc3RvcmFnZS0+cmVtb3ZlQWxsTWFwRW50cmllcygnSW1hZ2VCbG9ja0NhY2hlTWFwJywgdHJ1ZSk7CgkgICAgaWYgKCRyZXQpIHsKCQlyZXR1cm4gJHJldDsKCSAgICB9Cgl9CglpZiAoIWVtcHR5KCRjdXJyZW50VmVyc2lvbikgJiYgdmVyc2lvbl9jb21wYXJlKCRjdXJyZW50VmVyc2lvbiwgJzEuMS41JywgJzw9JykpIHsKCSAgICAvKiBBZGQgSW1hZ2VCbG9ja0NhY2hlTWFwOjpyYW5kb20gKi8KCSAgICAkcmV0ID0gJHN0b3JhZ2UtPmNvbmZpZ3VyZVN0b3JlKCR0aGlzLT5nZXRJZCgpLCBhcnJheSgnSW1hZ2VCbG9ja0NhY2hlTWFwOjEuMScpKTsKCSAgICBpZiAoJHJldCkgewoJCXJldHVybiAkcmV0OwoJICAgIH0KCX0KCWlmICghZW1wdHkoJGN1cnJlbnRWZXJzaW9uKSAmJiB2ZXJzaW9uX2NvbXBhcmUoJGN1cnJlbnRWZXJzaW9uLCAnMS4xLjcnLCAnPD0nKSkgewoJICAgIC8qIEFkZCBwcm9wZXIgaW5kZXggd2l0aCBuZXcgOjpyYW5kb20gY29sdW1uICovCgkgICAgJHJldCA9ICRzdG9yYWdlLT5jb25maWd1cmVTdG9yZSgkdGhpcy0+Z2V0SWQoKSwgYXJyYXkoJ0ltYWdlQmxvY2tDYWNoZU1hcDoxLjInKSk7CgkgICAgaWYgKCRyZXQpIHsKCQlyZXR1cm4gJHJldDsKCSAgICB9Cgl9CglyZXR1cm4gbnVsbDsKICAgIH0KCiAgICAvKioKICAgICAqIEBzZWUgR2FsbGVyeU1vZHVsZTo6cGVyZm9ybUZhY3RvcnlSZWdpc3RyYXRpb25zCiAgICAgKi8KICAgIGZ1bmN0aW9uIHBlcmZvcm1GYWN0b3J5UmVnaXN0cmF0aW9ucygpIHsKCSRyZXQgPSBHYWxsZXJ5Q29yZUFwaTo6cmVnaXN0ZXJGYWN0b3J5SW1wbGVtZW50YXRpb24oCgkgICAgJ0dhbGxlcnlFdmVudExpc3RlbmVyJywgJ0ltYWdlQmxvY2tIZWxwZXInLCAnSW1hZ2VCbG9ja0hlbHBlcicsIAoJICAgICdtb2R1bGVzL2ltYWdlYmxvY2svY2xhc3Nlcy9JbWFnZUJsb2NrSGVscGVyLmNsYXNzJywgJ2ltYWdlYmxvY2snLCAKCSAgICBhcnJheSgnR2FsbGVyeTo6Vmlld2FibGVUcmVlQ2hhbmdlJywgJ0dhbGxlcnlFbnRpdHk6OmRlbGV0ZScsICdHYWxsZXJ5RW50aXR5OjpzYXZlJykpOwoJaWYgKCRyZXQpIHsKCSAgICByZXR1cm4gJHJldDsKCX0KCgkkcmV0ID0gR2FsbGVyeUNvcmVBcGk6OnJlZ2lzdGVyRmFjdG9yeUltcGxlbWVudGF0aW9uKAoJICAgJ0l0ZW1FZGl0T3B0aW9uJywgJ0ltYWdlQmxvY2tPcHRpb24nLCAnSW1hZ2VCbG9ja09wdGlvbicsCgkgICAnbW9kdWxlcy9pbWFnZWJsb2NrL0ltYWdlQmxvY2tPcHRpb24uaW5jJywgJ2ltYWdlYmxvY2snLCBhcnJheSgnSXRlbUVkaXRBbGJ1bScpKTsKCWlmICgkcmV0KSB7CgkgICAgcmV0dXJuICRyZXQ7Cgl9CgoJcmV0dXJuIG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBAc2VlIEdhbGxlcnlNb2R1bGU6OmdldFNpdGVBZG1pblZpZXdzCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldFNpdGVBZG1pblZpZXdzKCkgewoJcmV0dXJuIGFycmF5KG51bGwsCgkJICAgICBhcnJheShhcnJheSgnbmFtZScgPT4gJHRoaXMtPnRyYW5zbGF0ZSgnSW1hZ2UgQmxvY2snKSwKCQkJCSAndmlldycgPT4gJ2ltYWdlYmxvY2suSW1hZ2VCbG9ja1NpdGVBZG1pbicpKSk7CiAgICB9Cn0KPz4K');
expand_1ac30f9b6e($outputDir, 'po/GNUmakefile', 'R0FMTEVSWURJUiA/PSAuLi8uLi8uLgpUT09MRElSID89ICQoR0FMTEVSWURJUikvbGliL3Rvb2xzCgppbmNsdWRlICQoVE9PTERJUikvcG8vR05VbWFrZWZpbGUuaW5jCgo=');
expand_1ac30f9b6e($outputDir, 'po/strings.raw', 'IyAkSWQ6IHN0cmluZ3MucmF3IDE2OTM0IDIwMDctMDgtMjEgMTY6MDk6NDRaIG1pbmRsZXNzICQKCi8qIG1vZHVsZS5pbmMgKi8KZ2V0dGV4dCgiSW1hZ2UgQmxvY2siKSAvKiBhbHNvIGluOiBjbGFzc2VzL0ltYWdlQmxvY2tIZWxwZXIuY2xhc3MgdGVtcGxhdGVzL0ltYWdlQmxvY2tPcHRpb24udHBsIHRlbXBsYXRlcy9ibG9ja3MvYmxvY2tzLmluYyAqLwpnZXR0ZXh0KCJSYW5kb20sIE1vc3QgUmVjZW50IG9yIE1vc3QgVmlld2VkIFBob3RvIG9yIEFsYnVtIikKZ2V0dGV4dCgiQmxvY2tzIikKCi8qIGNsYXNzZXMvSW1hZ2VCbG9ja0hlbHBlci5jbGFzcyAqLwpuZ2V0dGV4dCgiUmFuZG9tIEltYWdlIiwgIlJhbmRvbSBJbWFnZXMiKQpuZ2V0dGV4dCgiTmV3ZXN0IEltYWdlIiwgIk5ld2VzdCBJbWFnZXMiKQpuZ2V0dGV4dCgiTW9zdCBWaWV3ZWQgSW1hZ2UiLCAiTW9zdCBWaWV3ZWQgSW1hZ2VzIikKbmdldHRleHQoIlJhbmRvbSBBbGJ1bSIsICJSYW5kb20gQWxidW1zIikKbmdldHRleHQoIk5ld2VzdCBBbGJ1bSIsICJOZXdlc3QgQWxidW1zIikKbmdldHRleHQoIk1vc3QgVmlld2VkIEFsYnVtIiwgIk1vc3QgVmlld2VkIEFsYnVtcyIpCmdldHRleHQoIlBpY3R1cmUgb2YgdGhlIERheSIpCmdldHRleHQoIlBpY3R1cmUgb2YgdGhlIFdlZWsiKQpnZXR0ZXh0KCJQaWN0dXJlIG9mIHRoZSBNb250aCIpCmdldHRleHQoIkFsYnVtIG9mIHRoZSBEYXkiKQpnZXR0ZXh0KCJBbGJ1bSBvZiB0aGUgV2VlayIpCmdldHRleHQoIkFsYnVtIG9mIHRoZSBNb250aCIpCgovKiB0ZW1wbGF0ZXMvSW1hZ2VCbG9jay50cGwgKi8KZ2V0dGV4dCgiRGF0ZToiKQpnZXR0ZXh0KCJWaWV3czogJWQiKQpnZXR0ZXh0KCJPd25lcjogJXMiKQoKLyogdGVtcGxhdGVzL0ltYWdlQmxvY2tPcHRpb24udHBsICovCmdldHRleHQoIlByZXZlbnQgdGhpcyBhbGJ1bSBmcm9tIGJlaW5nIGRpc3BsYXllZCBpbiB0aGUgSW1hZ2UgQmxvY2siKQpnZXR0ZXh0KCJBcHBseSBJbWFnZUJsb2NrIHNldHRpbmdzIHRvIHN1Yi1hbGJ1bXMiKQoKLyogdGVtcGxhdGVzL0ltYWdlQmxvY2tTaXRlQWRtaW4udHBsICovCmdldHRleHQoIkltYWdlIEJsb2NrIFNldHRpbmdzIikKZ2V0dGV4dCgiU2V0dGluZ3Mgc2F2ZWQgc3VjY2Vzc2Z1bGx5IikKZ2V0dGV4dCgiU2hvdyIpCmdldHRleHQoIkhlYWRpbmciKQpnZXR0ZXh0KCJUaXRsZSIpCmdldHRleHQoIkRhdGUiKQpnZXR0ZXh0KCJWaWV3IENvdW50IikKZ2V0dGV4dCgiT3duZXIiKQpnZXR0ZXh0KCJGcmFtZXMiKQpnZXR0ZXh0KCJWaWV3IHNhbXBsZXMiKQpnZXR0ZXh0KCJBbGJ1bSBGcmFtZSIpCmdldHRleHQoIlBob3RvIEZyYW1lIikKZ2V0dGV4dCgiU2F2ZSIpCmdldHRleHQoIlJlc2V0IikKZ2V0dGV4dCgiRXh0ZXJuYWwgSW1hZ2UgQmxvY2siKQpnZXR0ZXh0KCJVc2UgYSBQSFAgYmxvY2sgbGlrZSB0aGUgb25lIHNob3duIGJlbG93IHRvIGluY2x1ZGUgYW4gaW1hZ2UgYmxvY2sgaW4gYSBQSFAgcGFnZSBvdXRzaWRlIG9mIEdhbGxlcnkuIikKZ2V0dGV4dCgiUGlwZSh8KSBzZXBhcmF0ZSBsaXN0IGNob3NlbiBmcm9tOiByYW5kb21JbWFnZSwgcmVjZW50SW1hZ2UsIHZpZXdlZEltYWdlLCByYW5kb21BbGJ1bSwgcmVjZW50QWxidW0sIHZpZXdlZEFsYnVtLCBkYWlseUltYWdlLCB3ZWVrbHlJbWFnZSwgbW9udGhseUltYWdlLCBkYWlseUFsYnVtLCB3ZWVrbHlBbGJ1bSwgbW9udGhseUFsYnVtLCBzcGVjaWZpY0l0ZW07IGRlZmF1bHQgaXMgcmFuZG9tSW1hZ2UiKQpnZXR0ZXh0KCJQaXBlKHwpIHNlcGFyYXRlZCBsaXN0IGNob3NlbiBmcm9tOiB0aXRsZSwgZGF0ZSwgdmlld3MsIG93bmVyLCBoZWFkaW5nLCBmdWxsU2l6ZSwgcmF3SW1hZ2U7IHRoZSB2YWx1ZSBjYW4gYWxzbyBiZTogbm9uZSIpCmdldHRleHQoIkxpbWl0IHRoZSBpdGVtIHNlbGVjdGlvbiB0byB0aGUgc3VidHJlZSBvZiB0aGUgZ2FsbGVyeSB1bmRlciB0aGUgYWxidW0gd2l0aCB0aGUgZ2l2ZW4gaWQ7IG9yIHRoZSBpZCBvZiB0aGUgaXRlbSB0byBkaXNwbGF5IHdoZW4gdXNlZCB3aXRoIHNwZWNpZmljSXRlbSBibG9jayB0eXBlIikKZ2V0dGV4dCgiU2NhbGUgaW1hZ2VzIHRvIHRoaXMgbWF4aW11bSBzaXplLiBJZiB1c2VkIGFsb25lIEdhbGxlcnkgd2lsbCBsb2NhdGUgdGhlIG1vc3QtY2xvc2VseS1zaXplZCBpbWFnZSB0byB0aGUgc3BlY2lmaWVkIHZhbHVlIC0gbGFyZ2VyIGltYWdlcyB3aWxsIGJlIHNjYWxlZCBkb3duIGFzIG5lY2Vzc2FyeSBpbiB5b3VyIGJyb3dzZXIuIElmIHNwZWNpZmllZCBhbG9uZyB3aXRoICVzc2hvdz1mdWxsU2l6ZSB0aGUgZnVsbCBzaXplIGltYWdlIHdpbGwgYWx3YXlzIGJlIHVzZWQgYW5kIHNjYWxlZCBkb3duIGFzIG5lY2Vzc2FyeS4iKQpnZXR0ZXh0KCJKdXN0IGxpa2UgJXNtYXhTaXplIGV4Y2VwdCB0aGF0IGl0IHdpbGwgbm90IHN1YnN0aXR1dGUgYW4gaW1hZ2Ugc21hbGxlciB0aGFuIHRoZSBzaXplIHlvdSByZXF1ZXN0LCBzbyB5b3UnbGwgZ2V0IHRoZSBjbG9zZXN0IG1hdGNoIGluIHNpemUgcG9zc2libGUuICBOb3RlIHRoYXQgdGhpcyBtYXkgdXNlIGEgbG90IG1vcmUgYmFuZHdpZHRoIGlmIGEgbXVjaCBsYXJnZXIgaW1hZ2UgaGFzIHRvIGJlIHNjYWxlZCBkb3duIGluIHlvdXIgYnJvd3Nlci4iKQpnZXR0ZXh0KCJIcmVmIGZvciBsaW5rIG9uIGltYWdlOyB2YWx1ZSBvZiBub25lIGZvciBubyBsaW5rOyBkZWZhdWx0IGlzIGxpbmsgdG8gaXRlbSBpbiB0aGUgR2FsbGVyeSIpCmdldHRleHQoIkFkZCBhIGxpbmsgdGFyZ2V0IChmb3IgZXhhbXBsZSwgdG8gb3BlbiBsaW5rcyBpbiBhIG5ldyBicm93c2VyIHdpbmRvdykiKQpnZXR0ZXh0KCJJbWFnZSBmcmFtZSB0byB1c2UgYXJvdW5kIGltYWdlcyIpCmdldHRleHQoIkltYWdlIGZyYW1lIHRvIHVzZSBhcm91bmQgYWxidW1zIikKZ2V0dGV4dCgiSWYgYSBwYXJhbWV0ZXIgbWFya2VkIHdpdGggKiBpcyBvbWl0dGVkIHRoZW4gdGhlIHNpdGUgZGVmYXVsdCBkZWZpbmVkIGFib3ZlIGlzIHVzZWQuIikKZ2V0dGV4dCgiSW1hZ2UgZnJhbWVzIHJlcXVpcmUgQ1NTIHRvIGJlIGRpc3BsYXllZCBjb3JyZWN0bHkuIEluY2x1ZGUgdGhlIGZvbGxvd2luZyBpbiB0aGUgJXMgc2VjdGlvbiB0byBzdXBwb3J0IGltYWdlIGZyYW1lcy4iKQpnZXR0ZXh0KCJTcGVjaWZ5IHRoZSBmcmFtZSBpZCAob3IgcGlwZSBzZXBhcmF0ZWQgbGlzdCBvZiBpZHMpIGluIHRoZSBmcmFtZXMgcGFyYW1ldGVyLiBPbWl0IHRoZSBwYXJhbWV0ZXIgdG8gc3VwcG9ydCB0aGUgaW1hZ2UgZnJhbWVzIGNvbmZpZ3VyZWQgYWJvdmUuIEZyYW1lIGlkcyBhcmUgdGhlIGRpcmVjdG9yeSBuYW1lcyBpbiB0aGUgJXMgZGlyZWN0b3J5LiIpCgovKiB0ZW1wbGF0ZXMvYmxvY2tzL2Jsb2Nrcy5pbmMgKi8KZ2V0dGV4dCgiSW1hZ2UgdHlwZSIpCmdldHRleHQoIlJhbmRvbSBpbWFnZSIpCmdldHRleHQoIlJlY2VudCBpbWFnZSIpCmdldHRleHQoIlZpZXdlZCBpbWFnZSIpCmdldHRleHQoIlJhbmRvbSBhbGJ1bSIpCmdldHRleHQoIlJlY2VudCBhbGJ1bSIpCmdldHRleHQoIlZpZXdlZCBhbGJ1bSIpCmdldHRleHQoIkRhaWx5IGltYWdlIikKZ2V0dGV4dCgiV2Vla2x5IGltYWdlIikKZ2V0dGV4dCgiTW9udGhseSBpbWFnZSIpCmdldHRleHQoIkRhaWx5IGFsYnVtIikKZ2V0dGV4dCgiV2Vla2x5IGFsYnVtIikKZ2V0dGV4dCgiTW9udGhseSBhbGJ1bSIpCmdldHRleHQoIk51bWJlciBvZiBpdGVtcyIpCmdldHRleHQoIlVzZSBkZWZhdWx0IHNldHRpbmdzIikKZ2V0dGV4dCgiU2hvdyBoZWFkaW5nIikKZ2V0dGV4dCgiU2hvdyB0aXRsZSIpCmdldHRleHQoIlNob3cgZGF0ZSIpCmdldHRleHQoIlNob3cgdmlldyBjb3VudCIpCmdldHRleHQoIlNob3cgb3duZXIiKQo=');
expand_1ac30f9b6e($outputDir, 'templates/ImageBlock.tpl', 'eyoKICogJFJldmlzaW9uOiAxNjIzNSAkCiAqIFJlYWQgdGhpcyBiZWZvcmUgY2hhbmdpbmcgdGVtcGxhdGVzISAgaHR0cDovL2NvZGV4LmdhbGxlcnkyLm9yZy9HYWxsZXJ5MjpFZGl0aW5nX1RlbXBsYXRlcwogKn0Ke2ZvcmVhY2ggZnJvbT0kSW1hZ2VCbG9ja0RhdGEuYmxvY2tzIGl0ZW09YmxvY2t9CjxkaXYgY2xhc3M9Im9uZS1pbWFnZSI+CiAge2lmICFlbXB0eSgkYmxvY2sudGl0bGUpfQogICAgPGgzPiB7Zy0+dGV4dCB0ZXh0PSRibG9jay50aXRsZX0gPC9oMz4KICB7L2lmfQoKICB7Y2FwdHVyZSBhc3NpZ249ImxpbmtIcmVmIn17c3RyaXB9CiAgICB7aWYgZW1wdHkoJEltYWdlQmxvY2tEYXRhLmxpbmspfQogICAgICB7Zy0+dXJsIGFyZzE9InZpZXc9Y29yZS5TaG93SXRlbSIgYXJnMj0iaXRlbUlkPWAkYmxvY2suaWRgIgoJICAgICAgZm9yY2VGdWxsVXJsPSRJbWFnZUJsb2NrRGF0YS5mb3JjZUZ1bGxVcmx9CiAgICB7ZWxzZWlmICRJbWFnZUJsb2NrRGF0YS5saW5rICE9ICdub25lJ30KICAgICAgeyRJbWFnZUJsb2NrRGF0YS5saW5rfQogICAgey9pZn0KICB7L3N0cmlwfXsvY2FwdHVyZX0KICB7Y2FwdHVyZSBhc3NpZ249ImxpbmsifXtpZiAhZW1wdHkoJGxpbmtIcmVmKX0KICAgIDxhIGhyZWY9InskbGlua0hyZWZ9IntpZgoJIWVtcHR5KCRJbWFnZUJsb2NrRGF0YS5saW5rVGFyZ2V0KX0gdGFyZ2V0PSJ7JEltYWdlQmxvY2tEYXRhLmxpbmtUYXJnZXR9InsvaWZ9PgogIHsvaWZ9ey9jYXB0dXJlfQogIHtpZiAkYmxvY2suaXRlbS5jYW5Db250YWluQ2hpbGRyZW59CiAgICB7YXNzaWduIHZhcj1mcmFtZVR5cGUgdmFsdWU9ImFsYnVtRnJhbWUifQogIHtlbHNlfQogICAge2Fzc2lnbiB2YXI9ZnJhbWVUeXBlIHZhbHVlPSJpdGVtRnJhbWUifQogIHsvaWZ9CiAge2lmIGFycmF5X2tleV9leGlzdHMoJ21heFNpemUnLCAkSW1hZ2VCbG9ja0RhdGEpfQogICAge2Fzc2lnbiB2YXI9bWF4U2l6ZSB2YWx1ZT0kSW1hZ2VCbG9ja0RhdGEubWF4U2l6ZX0KICB7ZWxzZWlmIGlzc2V0KCRJbWFnZUJsb2NrRGF0YS4kZnJhbWVUeXBlKSAmJiAkSW1hZ2VCbG9ja0RhdGEuJGZyYW1lVHlwZSAhPSAnbm9uZSd9CiAgICB7YXNzaWduIHZhcj1tYXhTaXplIHZhbHVlPTEyMH0KICB7ZWxzZX0KICAgIHthc3NpZ24gdmFyPW1heFNpemUgdmFsdWU9MTUwfQogIHsvaWZ9CiAge2Fzc2lnbiB2YXI9aW1hZ2VJdGVtIHZhbHVlPSRibG9jay5pdGVtfQogIHtpZiBpc3NldCgkYmxvY2suZm9yY2VJdGVtKX17YXNzaWduIHZhcj1pbWFnZUl0ZW0gdmFsdWU9JGJsb2NrLnRodW1ifXsvaWZ9CiAge2lmIGlzc2V0KCRJbWFnZUJsb2NrRGF0YS4kZnJhbWVUeXBlKX0KICAgIHtnLT5jb250YWluZXIgdHlwZT0iaW1hZ2VmcmFtZS5JbWFnZUZyYW1lIiBmcmFtZT0kSW1hZ2VCbG9ja0RhdGEuJGZyYW1lVHlwZQoJCSAgd2lkdGg9JGJsb2NrLnRodW1iLndpZHRoIGhlaWdodD0kYmxvY2sudGh1bWIuaGVpZ2h0IG1heFNpemU9JG1heFNpemV9CiAgICAgIHskbGlua30KCXtnLT5pbWFnZSBpdGVtPSRpbWFnZUl0ZW0gaW1hZ2U9JGJsb2NrLnRodW1iIGlkPSIlSUQlIiBjbGFzcz0iJUNMQVNTJSIgbWF4U2l6ZT0kbWF4U2l6ZSBmb3JjZUZ1bGxVcmw9JEltYWdlQmxvY2tEYXRhLmZvcmNlRnVsbFVybH0KICAgICAge2lmICFlbXB0eSgkbGlua0hyZWYpfSA8L2E+IHsvaWZ9CiAgICB7L2ctPmNvbnRhaW5lcn0KICB7ZWxzZX0KICAgIHskbGlua30KICAgICAge2ctPmltYWdlIGl0ZW09JGltYWdlSXRlbSBpbWFnZT0kYmxvY2sudGh1bWIgY2xhc3M9ImdpVGh1bWJuYWlsIiBtYXhTaXplPSRtYXhTaXplIGZvcmNlRnVsbFVybD0kSW1hZ2VCbG9ja0RhdGEuZm9yY2VGdWxsVXJsfQogICAge2lmICFlbXB0eSgkbGlua0hyZWYpfSA8L2E+IHsvaWZ9CiAgey9pZn0KCiAge2lmIGlzc2V0KCRJbWFnZUJsb2NrRGF0YS5zaG93LnRpdGxlKSAmJiBpc3NldCgkYmxvY2suaXRlbS50aXRsZSl9CiAgICA8aDQgY2xhc3M9ImdpRGVzY3JpcHRpb24iPgogICAgICB7JGJsb2NrLml0ZW0udGl0bGV8bWFya3VwfQogICAgPC9oND4KICB7L2lmfQoKICB7aWYgaXNzZXQoJEltYWdlQmxvY2tEYXRhLnNob3cuZGF0ZSkgfHwKICAgICAgaXNzZXQoJEltYWdlQmxvY2tEYXRhLnNob3cudmlld3MpIHx8CiAgICAgIGlzc2V0KCRJbWFnZUJsb2NrRGF0YS5zaG93Lm93bmVyKX0KICAgIDxwIGNsYXNzPSJnaUluZm8iPgogICAgICB7aWYgaXNzZXQoJEltYWdlQmxvY2tEYXRhLnNob3cuZGF0ZSl9CiAgICAgIDxzcGFuIGNsYXNzPSJzdW1tYXJ5Ij4KCXtnLT50ZXh0IHRleHQ9IkRhdGU6In0ge2ctPmRhdGUgdGltZXN0YW1wPSRibG9jay5pdGVtLm9yaWdpbmF0aW9uVGltZXN0YW1wfQogICAgICA8L3NwYW4+CiAgICAgIHsvaWZ9CgogICAgICB7aWYgaXNzZXQoJEltYWdlQmxvY2tEYXRhLnNob3cudmlld3MpfQogICAgICA8c3BhbiBjbGFzcz0ic3VtbWFyeSI+Cgl7Zy0+dGV4dCB0ZXh0PSJWaWV3czogJWQiIGFyZzE9JGJsb2NrLnZpZXdDb3VudH0KICAgICAgPC9zcGFuPgogICAgICB7L2lmfQoKICAgICAge2lmIGlzc2V0KCRJbWFnZUJsb2NrRGF0YS5zaG93Lm93bmVyKX0KICAgICAgPHNwYW4gY2xhc3M9InN1bW1hcnkiPgoJe2ctPnRleHQgdGV4dD0iT3duZXI6ICVzIiBhcmcxPSRibG9jay5vd25lci5mdWxsTmFtZXxkZWZhdWx0OiRibG9jay5vd25lci51c2VyTmFtZX0KICAgICAgPC9zcGFuPgogICAgICB7L2lmfQogICAgPC9wPgogIHsvaWZ9CiA8L2Rpdj4Key9mb3JlYWNofQoK');
expand_1ac30f9b6e($outputDir, 'templates/ImageBlockOption.tpl', 'eyoKICogJFJldmlzaW9uOiAxNzM4MCAkCiAqIFJlYWQgdGhpcyBiZWZvcmUgY2hhbmdpbmcgdGVtcGxhdGVzISAgaHR0cDovL2NvZGV4LmdhbGxlcnkyLm9yZy9HYWxsZXJ5MjpFZGl0aW5nX1RlbXBsYXRlcwogKn0KPGRpdiBjbGFzcz0iZ2JCbG9jayI+CiAgPGgzPiB7Zy0+dGV4dCB0ZXh0PSJJbWFnZSBCbG9jayJ9IDwvaDM+CgogIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9IkltYWdlQmxvY2tPcHRpb25fc2V0RGlzYWJsZWQiCiAgIG5hbWU9IntnLT5mb3JtVmFyIHZhcj0iZm9ybVtJbWFnZUJsb2NrT3B0aW9uXVtzZXREaXNhYmxlZF0ifSIKICAge2lmICRmb3JtLkltYWdlQmxvY2tPcHRpb24uc2V0RGlzYWJsZWR9IGNoZWNrZWQ9ImNoZWNrZWQiey9pZn0vPgogIDxsYWJlbCBmb3I9IkltYWdlQmxvY2tPcHRpb25fc2V0RGlzYWJsZWQiPgogICAge2ctPnRleHQgdGV4dD0iUHJldmVudCB0aGlzIGFsYnVtIGZyb20gYmVpbmcgZGlzcGxheWVkIGluIHRoZSBJbWFnZSBCbG9jayJ9CiAgPC9sYWJlbD4KICA8YnIvPgoKICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJJbWFnZUJsb2NrT3B0aW9uX3NldFJlY3Vyc2l2ZSIgY2hlY2tlZD0iY2hlY2tlZCIKICAgbmFtZT0ie2ctPmZvcm1WYXIgdmFyPSJmb3JtW0ltYWdlQmxvY2tPcHRpb25dW3NldFJlY3Vyc2l2ZV0ifSIvPgogIDxsYWJlbCBmb3I9IkltYWdlQmxvY2tPcHRpb25fc2V0UmVjdXJzaXZlIj4KICAgIHtnLT50ZXh0IHRleHQ9IkFwcGx5IEltYWdlQmxvY2sgc2V0dGluZ3MgdG8gc3ViLWFsYnVtcyJ9CiAgPC9sYWJlbD4KPC9kaXY+Cg==');
expand_1ac30f9b6e($outputDir, 'templates/ImageBlockSiteAdmin.tpl', '');
expand_1ac30f9b6e($outputDir, 'templates/blocks/ImageBlock.tpl', 'eyoKICogJFJldmlzaW9uOiAxNzQyMiAkCiAqIFJlYWQgdGhpcyBiZWZvcmUgY2hhbmdpbmcgdGVtcGxhdGVzISAgaHR0cDovL2NvZGV4LmdhbGxlcnkyLm9yZy9HYWxsZXJ5MjpFZGl0aW5nX1RlbXBsYXRlcwogKn0Ke2ctPmNhbGxiYWNrIHR5cGU9ImltYWdlYmxvY2suTG9hZEltYWdlQmxvY2siCgkgICAgIGJsb2Nrcz0kYmxvY2tzfGRlZmF1bHQ6bnVsbCByZXBlYXRCbG9jaz0kcmVwZWF0QmxvY2t8ZGVmYXVsdDpudWxsCgkgICAgIG1heFNpemU9JG1heFNpemV8ZGVmYXVsdDpudWxsIGl0ZW1JZD0kaXRlbUlkfGRlZmF1bHQ6bnVsbAoJICAgICBsaW5rPSRsaW5rfGRlZmF1bHQ6bnVsbCBsaW5rVGFyZ2V0PSRsaW5rVGFyZ2V0fGRlZmF1bHQ6bnVsbAoJICAgICB1c2VEZWZhdWx0cz0kdXNlRGVmYXVsdHN8ZGVmYXVsdDp0cnVlIHNob3dIZWFkaW5nPSRzaG93SGVhZGluZ3xkZWZhdWx0OnRydWUKCSAgICAgc2hvd1RpdGxlPSRzaG93VGl0bGV8ZGVmYXVsdDp0cnVlIHNob3dEYXRlPSRzaG93RGF0ZXxkZWZhdWx0OnRydWUKCSAgICAgc2hvd1ZpZXdzPSRzaG93Vmlld3N8ZGVmYXVsdDpmYWxzZSBzaG93T3duZXI9JHNob3dPd25lcnxkZWZhdWx0OmZhbHNlCgkgICAgIHNob3c9JHNob3d8ZGVmYXVsdDpudWxsIGV4YWN0U2l6ZT0kZXhhY3RTaXplfGRlZmF1bHQ6bnVsbAoJICAgICBpdGVtRnJhbWU9JGl0ZW1GcmFtZXxkZWZhdWx0Om51bGwgYWxidW1GcmFtZT0kYWxidW1GcmFtZXxkZWZhdWx0Om51bGx9Cgp7aWYgIWVtcHR5KCRJbWFnZUJsb2NrRGF0YSl9CjxkaXYgY2xhc3M9InskY2xhc3N9Ij4KICB7aW5jbHVkZSBmaWxlPSJnYWxsZXJ5Om1vZHVsZXMvaW1hZ2VibG9jay90ZW1wbGF0ZXMvSW1hZ2VCbG9jay50cGwifQo8L2Rpdj4Key9pZn0K');
expand_1ac30f9b6e($outputDir, 'templates/blocks/blocks.inc', 'PD9waHAKJGJsb2Nrc1snSW1hZ2VCbG9jayddID0gYXJyYXkoCiAgICAnZGVzY3JpcHRpb24nID0+ICRnYWxsZXJ5LT5pMThuKCdJbWFnZSBCbG9jaycpLAogICAgJ3ZhcnMnID0+IGFycmF5KAoJJ2Jsb2NrcycgPT4gYXJyYXkoCgkgICAgJ2Rlc2NyaXB0aW9uJyA9PiAkZ2FsbGVyeS0+aTE4bignSW1hZ2UgdHlwZScpLAoJICAgICd0eXBlJyA9PiAnY2hvaWNlJywKCSAgICAnZGVmYXVsdCcgPT4gJ3JhbmRvbUltYWdlJywKCSAgICAnY2hvaWNlcycgPT4gYXJyYXkoCgkJJ3JhbmRvbUltYWdlJyA9PiAkZ2FsbGVyeS0+aTE4bignUmFuZG9tIGltYWdlJyksCgkJJ3JlY2VudEltYWdlJyA9PiAkZ2FsbGVyeS0+aTE4bignUmVjZW50IGltYWdlJyksCgkJJ3ZpZXdlZEltYWdlJyA9PiAkZ2FsbGVyeS0+aTE4bignVmlld2VkIGltYWdlJyksCgkJJ3JhbmRvbUFsYnVtJyA9PiAkZ2FsbGVyeS0+aTE4bignUmFuZG9tIGFsYnVtJyksCgkJJ3JlY2VudEFsYnVtJyA9PiAkZ2FsbGVyeS0+aTE4bignUmVjZW50IGFsYnVtJyksCgkJJ3ZpZXdlZEFsYnVtJyA9PiAkZ2FsbGVyeS0+aTE4bignVmlld2VkIGFsYnVtJyksCgkJJ2RhaWx5SW1hZ2UnID0+ICRnYWxsZXJ5LT5pMThuKCdEYWlseSBpbWFnZScpLAoJCSd3ZWVrbHlJbWFnZScgPT4gJGdhbGxlcnktPmkxOG4oJ1dlZWtseSBpbWFnZScpLAoJCSdtb250aGx5SW1hZ2UnID0+ICRnYWxsZXJ5LT5pMThuKCdNb250aGx5IGltYWdlJyksCgkJJ2RhaWx5QWxidW0nID0+ICRnYWxsZXJ5LT5pMThuKCdEYWlseSBhbGJ1bScpLAoJCSd3ZWVrbHlBbGJ1bScgPT4gJGdhbGxlcnktPmkxOG4oJ1dlZWtseSBhbGJ1bScpLAoJCSdtb250aGx5QWxidW0nID0+ICRnYWxsZXJ5LT5pMThuKCdNb250aGx5IGFsYnVtJykpKSwKCSdyZXBlYXRCbG9jaycgPT4gYXJyYXkoCgkgICAgJ2Rlc2NyaXB0aW9uJyA9PiAkZ2FsbGVyeS0+aTE4bignTnVtYmVyIG9mIGl0ZW1zJyksCgkgICAgJ3R5cGUnID0+ICd0ZXh0JywKCSAgICAnZGVmYXVsdCcgPT4gJzEnKSwKCSd1c2VEZWZhdWx0cycgPT4gYXJyYXkoCgkgICAgJ2Rlc2NyaXB0aW9uJyA9PiAkZ2FsbGVyeS0+aTE4bignVXNlIGRlZmF1bHQgc2V0dGluZ3MnKSwKCSAgICAndHlwZScgPT4gJ2Jvb2xlYW4nLAoJICAgICdkZWZhdWx0JyA9PiAndHJ1ZScsCgkgICAgJ292ZXJyaWRlcycgPT4gYXJyYXkoJ3Nob3dIZWFkaW5nJywgJ3Nob3dUaXRsZScsICdzaG93RGF0ZScsCgkJCQkgJ3Nob3dWaWV3cycsICdzaG93T3duZXInKSksCgknc2hvd0hlYWRpbmcnID0+IGFycmF5KAoJICAgICdkZXNjcmlwdGlvbicgPT4gJGdhbGxlcnktPmkxOG4oJ1Nob3cgaGVhZGluZycpLAoJICAgICd0eXBlJyA9PiAnYm9vbGVhbicsCgkgICAgJ2RlZmF1bHQnID0+ICd0cnVlJyksCgknc2hvd1RpdGxlJyA9PiBhcnJheSgKCSAgICAnZGVzY3JpcHRpb24nID0+ICRnYWxsZXJ5LT5pMThuKCdTaG93IHRpdGxlJyksCgkgICAgJ3R5cGUnID0+ICdib29sZWFuJywKCSAgICAnZGVmYXVsdCcgPT4gJ3RydWUnKSwKCSdzaG93RGF0ZScgPT4gYXJyYXkoCgkgICAgJ2Rlc2NyaXB0aW9uJyA9PiAkZ2FsbGVyeS0+aTE4bignU2hvdyBkYXRlJyksCgkgICAgJ3R5cGUnID0+ICdib29sZWFuJywKCSAgICAnZGVmYXVsdCcgPT4gJ3RydWUnKSwKCSdzaG93Vmlld3MnID0+IGFycmF5KAoJICAgICdkZXNjcmlwdGlvbicgPT4gJGdhbGxlcnktPmkxOG4oJ1Nob3cgdmlldyBjb3VudCcpLAoJICAgICd0eXBlJyA9PiAnYm9vbGVhbicsCgkgICAgJ2RlZmF1bHQnID0+ICdmYWxzZScpLAoJJ3Nob3dPd25lcicgPT4gYXJyYXkoCgkgICAgJ2Rlc2NyaXB0aW9uJyA9PiAkZ2FsbGVyeS0+aTE4bignU2hvdyBvd25lcicpLAoJICAgICd0eXBlJyA9PiAnYm9vbGVhbicsCgkgICAgJ2RlZmF1bHQnID0+ICdmYWxzZScpKSk7Cj8+Cg==');
}
function expand_1ac30f9b6e($outputDir, $relativePath, $data) {
global $gallery;
$platform =& $gallery->getPlatform();
$platform->file_put_contents($outputDir . $relativePath, base64_decode($data));
$platform->chmod($outputDir . $relativePath);
}
$unpackFunction = "unpack_1ac30f9b6e";
?>